;buildInfoPackage: chisel3, version: 3.1.2, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-07-25 16:52:17.431, builtAtMillis: 1532537537431
circuit TopSimulator : 
  module CRCEncode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>}
    
    reg counter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[CRCEncode.scala 31:24]
    reg dataExtended : UInt<24>, clock with : (reset => (reset, UInt<24>("h00"))) @[CRCEncode.scala 33:29]
    reg requestData : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[CRCEncode.scala 35:28]
    io.in.ready <= requestData @[CRCEncode.scala 36:15]
    reg validOut : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCEncode.scala 38:25]
    io.out.valid <= validOut @[CRCEncode.scala 39:16]
    reg frameBitsBuffer : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[CRCEncode.scala 41:32]
    reg frameIndexBuffer : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[CRCEncode.scala 42:33]
    reg dataInBuffer : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[CRCEncode.scala 43:29]
    reg frameOut : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[CRCEncode.scala 45:25]
    io.out.bits <= frameOut @[CRCEncode.scala 46:15]
    node _T_32 = and(io.out.ready, requestData) @[CRCEncode.scala 65:21]
    node _T_33 = and(_T_32, io.in.valid) @[CRCEncode.scala 65:36]
    when _T_33 : @[CRCEncode.scala 65:51]
      frameBitsBuffer <= io.frameBits @[CRCEncode.scala 66:21]
      frameIndexBuffer <= io.frameIndex @[CRCEncode.scala 67:22]
      dataInBuffer <= io.in.bits @[CRCEncode.scala 68:18]
      node _T_34 = shl(io.in.bits, 8) @[CRCEncode.scala 69:32]
      dataExtended <= _T_34 @[CRCEncode.scala 69:18]
      requestData <= UInt<1>("h00") @[CRCEncode.scala 70:17]
      counter <= UInt<1>("h00") @[CRCEncode.scala 71:13]
      validOut <= UInt<1>("h00") @[CRCEncode.scala 72:14]
      skip @[CRCEncode.scala 65:51]
    else : @[CRCEncode.scala 73:40]
      node _T_39 = eq(validOut, UInt<1>("h00")) @[CRCEncode.scala 73:14]
      node _T_41 = eq(requestData, UInt<1>("h00")) @[CRCEncode.scala 73:27]
      node _T_42 = and(_T_39, _T_41) @[CRCEncode.scala 73:24]
      when _T_42 : @[CRCEncode.scala 73:40]
        node _T_44 = shl(UInt<1>("h01"), 8) @[CRCEncode.scala 74:30]
        node _T_45 = lt(dataExtended, _T_44) @[CRCEncode.scala 74:23]
        when _T_45 : @[CRCEncode.scala 74:53]
          node _T_46 = bits(dataExtended, 7, 0) @[CRCEncode.scala 75:84]
          node _T_47 = cat(dataInBuffer, _T_46) @[Cat.scala 30:58]
          node _T_48 = cat(frameBitsBuffer, frameIndexBuffer) @[Cat.scala 30:58]
          node _T_49 = cat(_T_48, _T_47) @[Cat.scala 30:58]
          frameOut <= _T_49 @[CRCEncode.scala 75:16]
          validOut <= UInt<1>("h01") @[CRCEncode.scala 76:16]
          requestData <= UInt<1>("h01") @[CRCEncode.scala 77:19]
          skip @[CRCEncode.scala 74:53]
        else : @[CRCEncode.scala 78:44]
          node _T_52 = eq(dataExtended, io.divisor) @[CRCEncode.scala 78:29]
          when _T_52 : @[CRCEncode.scala 78:44]
            node _T_53 = shl(dataInBuffer, 8) @[CRCEncode.scala 79:72]
            node _T_54 = cat(frameBitsBuffer, frameIndexBuffer) @[Cat.scala 30:58]
            node _T_55 = cat(_T_54, _T_53) @[Cat.scala 30:58]
            frameOut <= _T_55 @[CRCEncode.scala 79:16]
            validOut <= UInt<1>("h01") @[CRCEncode.scala 80:16]
            requestData <= UInt<1>("h01") @[CRCEncode.scala 81:19]
            skip @[CRCEncode.scala 78:44]
          else : @[CRCEncode.scala 82:16]
            node _T_59 = add(counter, UInt<1>("h01")) @[CRCEncode.scala 83:26]
            node _T_60 = tail(_T_59, 1) @[CRCEncode.scala 83:26]
            counter <= _T_60 @[CRCEncode.scala 83:15]
            validOut <= UInt<1>("h00") @[CRCEncode.scala 84:16]
            node _T_64 = sub(UInt<5>("h018"), UInt<1>("h01")) @[CRCEncode.scala 85:62]
            node _T_65 = asUInt(_T_64) @[CRCEncode.scala 85:62]
            node _T_66 = tail(_T_65, 1) @[CRCEncode.scala 85:62]
            node _T_67 = sub(_T_66, counter) @[CRCEncode.scala 85:66]
            node _T_68 = asUInt(_T_67) @[CRCEncode.scala 85:66]
            node _T_69 = tail(_T_68, 1) @[CRCEncode.scala 85:66]
            node _T_70 = dshr(dataExtended, _T_69) @[CRCEncode.scala 85:24]
            node _T_71 = bits(_T_70, 0, 0) @[CRCEncode.scala 85:24]
            node _T_73 = eq(_T_71, UInt<1>("h01")) @[CRCEncode.scala 85:76]
            when _T_73 : @[CRCEncode.scala 85:84]
              node _T_75 = eq(counter, UInt<1>("h00")) @[CRCEncode.scala 86:22]
              when _T_75 : @[CRCEncode.scala 86:30]
                node _T_76 = bits(dataExtended, 23, 15) @[CRCEncode.scala 87:44]
                node _T_77 = xor(_T_76, io.divisor) @[CRCEncode.scala 87:91]
                node _T_78 = bits(dataExtended, 14, 0) @[CRCEncode.scala 87:117]
                node _T_79 = cat(_T_77, _T_78) @[Cat.scala 30:58]
                dataExtended <= _T_79 @[CRCEncode.scala 87:24]
                skip @[CRCEncode.scala 86:30]
              else : @[CRCEncode.scala 88:20]
                node _T_82 = sub(counter, UInt<1>("h01")) @[CRCEncode.scala 89:54]
                node _T_83 = asUInt(_T_82) @[CRCEncode.scala 89:54]
                node _T_84 = tail(_T_83, 1) @[CRCEncode.scala 89:54]
                node _T_85 = dshl(UInt<1>("h00"), _T_84) @[CRCEncode.scala 89:43]
                node _T_86 = dshl(dataExtended, counter) @[CRCEncode.scala 90:37]
                node _T_87 = bits(_T_86, 23, 0) @[CRCEncode.scala 90:47]
                node _T_88 = shr(_T_87, 15) @[CRCEncode.scala 90:79]
                node _T_89 = xor(_T_88, io.divisor) @[CRCEncode.scala 90:98]
                node _T_91 = add(UInt<4>("h09"), counter) @[CRCEncode.scala 91:61]
                node _T_92 = tail(_T_91, 1) @[CRCEncode.scala 91:61]
                node _T_93 = dshl(dataExtended, _T_92) @[CRCEncode.scala 91:41]
                node _T_94 = bits(_T_93, 23, 0) @[CRCEncode.scala 91:71]
                node _T_96 = add(UInt<4>("h09"), counter) @[CRCEncode.scala 91:124]
                node _T_97 = tail(_T_96, 1) @[CRCEncode.scala 91:124]
                node _T_98 = dshr(_T_94, _T_97) @[CRCEncode.scala 91:105]
                node _T_99 = cat(_T_85, _T_89) @[Cat.scala 30:58]
                node _T_102 = sub(UInt<5>("h018"), UInt<4>("h09")) @[CRCEncode.scala 92:87]
                node _T_103 = asUInt(_T_102) @[CRCEncode.scala 92:87]
                node _T_104 = tail(_T_103, 1) @[CRCEncode.scala 92:87]
                node _T_105 = sub(_T_104, counter) @[CRCEncode.scala 92:109]
                node _T_106 = asUInt(_T_105) @[CRCEncode.scala 92:109]
                node _T_107 = tail(_T_106, 1) @[CRCEncode.scala 92:109]
                node _T_108 = dshl(_T_99, _T_107) @[CRCEncode.scala 92:47]
                node _T_109 = or(_T_108, _T_98) @[CRCEncode.scala 92:119]
                dataExtended <= _T_109 @[CRCEncode.scala 92:24]
                skip @[CRCEncode.scala 88:20]
              skip @[CRCEncode.scala 85:84]
            skip @[CRCEncode.scala 82:16]
        skip @[CRCEncode.scala 73:40]
      else : @[CRCEncode.scala 99:14]
        validOut <= UInt<1>("h00") @[CRCEncode.scala 100:14]
        skip @[CRCEncode.scala 99:14]
    
  module FrameStack : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}}
    
    smem stack : UInt<36>[100] @[FrameStack.scala 29:26]
    reg readAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[FrameStack.scala 30:25]
    reg writeAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[FrameStack.scala 31:26]
    reg stackUsed : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[FrameStack.scala 32:26]
    reg frameOut : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameStack.scala 34:25]
    wire _T_25 : UInt @[FrameStack.scala 35:25]
    _T_25 is invalid @[FrameStack.scala 35:25]
    when UInt<1>("h01") : @[FrameStack.scala 35:25]
      _T_25 <= readAddr @[FrameStack.scala 35:25]
      node _T_27 = or(_T_25, UInt<7>("h00")) @[FrameStack.scala 35:25]
      node _T_28 = bits(_T_27, 6, 0) @[FrameStack.scala 35:25]
      read mport _T_29 = stack[_T_28], clock @[FrameStack.scala 35:25]
      skip @[FrameStack.scala 35:25]
    frameOut <= _T_29 @[FrameStack.scala 35:12]
    io.out.bits <= frameOut @[FrameStack.scala 36:15]
    reg frameValidOut : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 37:30]
    io.out.valid <= frameValidOut @[FrameStack.scala 38:16]
    node _T_33 = eq(stackUsed, UInt<7>("h064")) @[FrameStack.scala 40:30]
    node _T_35 = eq(_T_33, UInt<1>("h00")) @[FrameStack.scala 40:18]
    io.in.ready <= _T_35 @[FrameStack.scala 40:15]
    node _T_36 = and(io.in.ready, io.in.valid) @[FrameStack.scala 42:20]
    when _T_36 : @[FrameStack.scala 42:35]
      write mport _T_37 = stack[writeAddr], clock
      _T_37 <= io.in.bits
      node _T_39 = add(stackUsed, UInt<1>("h01")) @[FrameStack.scala 44:28]
      node _T_40 = tail(_T_39, 1) @[FrameStack.scala 44:28]
      stackUsed <= _T_40 @[FrameStack.scala 44:15]
      frameValidOut <= UInt<1>("h00") @[FrameStack.scala 45:19]
      node _T_43 = eq(writeAddr, UInt<7>("h063")) @[FrameStack.scala 46:32]
      node _T_46 = add(writeAddr, UInt<1>("h01")) @[FrameStack.scala 46:73]
      node _T_47 = tail(_T_46, 1) @[FrameStack.scala 46:73]
      node _T_48 = mux(_T_43, UInt<1>("h00"), _T_47) @[FrameStack.scala 46:21]
      writeAddr <= _T_48 @[FrameStack.scala 46:15]
      skip @[FrameStack.scala 42:35]
    else : @[FrameStack.scala 47:64]
      node _T_50 = eq(frameValidOut, UInt<1>("h00")) @[FrameStack.scala 47:30]
      node _T_51 = and(io.out.ready, _T_50) @[FrameStack.scala 47:27]
      node _T_53 = gt(stackUsed, UInt<1>("h00")) @[FrameStack.scala 47:58]
      node _T_54 = and(_T_51, _T_53) @[FrameStack.scala 47:45]
      when _T_54 : @[FrameStack.scala 47:64]
        node _T_56 = sub(stackUsed, UInt<1>("h01")) @[FrameStack.scala 49:28]
        node _T_57 = asUInt(_T_56) @[FrameStack.scala 49:28]
        node _T_58 = tail(_T_57, 1) @[FrameStack.scala 49:28]
        stackUsed <= _T_58 @[FrameStack.scala 49:15]
        frameValidOut <= UInt<1>("h01") @[FrameStack.scala 50:19]
        node _T_61 = eq(readAddr, UInt<7>("h063")) @[FrameStack.scala 51:30]
        node _T_64 = add(readAddr, UInt<1>("h01")) @[FrameStack.scala 51:70]
        node _T_65 = tail(_T_64, 1) @[FrameStack.scala 51:70]
        node _T_66 = mux(_T_61, UInt<1>("h00"), _T_65) @[FrameStack.scala 51:20]
        readAddr <= _T_66 @[FrameStack.scala 51:14]
        skip @[FrameStack.scala 47:64]
      else : @[FrameStack.scala 52:14]
        frameValidOut <= UInt<1>("h00") @[FrameStack.scala 53:19]
        skip @[FrameStack.scala 52:14]
    
  module FrameSend : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, flip frameBits : UInt<4>, flip crcPassAsRx : UInt<1>, flip crcFailAsRx : UInt<1>, flip sendAsTx : UInt<1>, flip resendAsTx : UInt<1>, out : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[FrameSend.scala 34:18]
    reg out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 36:20]
    io.out <= out @[FrameSend.scala 37:10]
    node resendFrame = cat(io.frameBits, UInt<32>("h00")) @[Cat.scala 30:58]
    node nextFrame = cat(io.frameBits, UInt<32>("h0a")) @[Cat.scala 30:58]
    reg crcPassAsRx : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 43:28]
    reg crcFail : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 44:24]
    reg resend : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 45:23]
    reg send : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 46:21]
    when io.crcPassAsRx : @[FrameSend.scala 47:23]
      crcPassAsRx <= UInt<1>("h01") @[FrameSend.scala 48:17]
      skip @[FrameSend.scala 47:23]
    else : @[FrameSend.scala 49:37]
      node _T_28 = eq(state, UInt<3>("h03")) @[FrameSend.scala 49:20]
      when _T_28 : @[FrameSend.scala 49:37]
        crcPassAsRx <= UInt<1>("h00") @[FrameSend.scala 50:17]
        skip @[FrameSend.scala 49:37]
    when io.crcFailAsRx : @[FrameSend.scala 52:23]
      crcFail <= UInt<1>("h01") @[FrameSend.scala 53:13]
      skip @[FrameSend.scala 52:23]
    else : @[FrameSend.scala 54:37]
      node _T_31 = eq(state, UInt<3>("h02")) @[FrameSend.scala 54:20]
      when _T_31 : @[FrameSend.scala 54:37]
        crcFail <= UInt<1>("h00") @[FrameSend.scala 55:13]
        skip @[FrameSend.scala 54:37]
    when io.resendAsTx : @[FrameSend.scala 57:22]
      resend <= UInt<1>("h01") @[FrameSend.scala 58:12]
      skip @[FrameSend.scala 57:22]
    else : @[FrameSend.scala 59:36]
      node _T_34 = eq(state, UInt<3>("h04")) @[FrameSend.scala 59:20]
      when _T_34 : @[FrameSend.scala 59:36]
        resend <= UInt<1>("h00") @[FrameSend.scala 60:12]
        skip @[FrameSend.scala 59:36]
    when io.sendAsTx : @[FrameSend.scala 62:20]
      send <= UInt<1>("h01") @[FrameSend.scala 63:10]
      skip @[FrameSend.scala 62:20]
    else : @[FrameSend.scala 64:34]
      node _T_37 = eq(state, UInt<3>("h05")) @[FrameSend.scala 64:20]
      when _T_37 : @[FrameSend.scala 64:34]
        send <= UInt<1>("h00") @[FrameSend.scala 65:10]
        skip @[FrameSend.scala 64:34]
    reg requestFrame : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 68:29]
    io.in.ready <= requestFrame @[FrameSend.scala 69:15]
    reg frameBuffer : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameSend.scala 71:28]
    reg counter : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FrameSend.scala 73:24]
    node _T_45 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_45 : @[Conditional.scala 40:58]
      out <= UInt<1>("h00") @[FrameSend.scala 78:11]
      counter <= UInt<1>("h00") @[FrameSend.scala 79:15]
      when crcFail : @[FrameSend.scala 80:20]
        state <= UInt<3>("h02") @[FrameSend.scala 81:15]
        skip @[FrameSend.scala 80:20]
      else : @[FrameSend.scala 82:30]
        when crcPassAsRx : @[FrameSend.scala 82:30]
          state <= UInt<3>("h03") @[FrameSend.scala 83:15]
          skip @[FrameSend.scala 82:30]
        else : @[FrameSend.scala 84:25]
          when resend : @[FrameSend.scala 84:25]
            state <= UInt<3>("h04") @[FrameSend.scala 85:15]
            skip @[FrameSend.scala 84:25]
          else : @[FrameSend.scala 86:23]
            when send : @[FrameSend.scala 86:23]
              state <= UInt<3>("h01") @[FrameSend.scala 87:15]
              skip @[FrameSend.scala 86:23]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_48 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_48 : @[Conditional.scala 39:67]
        requestFrame <= UInt<1>("h01") @[FrameSend.scala 92:20]
        state <= UInt<3>("h05") @[FrameSend.scala 93:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_50 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_50 : @[Conditional.scala 39:67]
          frameBuffer <= resendFrame @[FrameSend.scala 96:19]
          state <= UInt<3>("h06") @[FrameSend.scala 97:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_51 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_51 : @[Conditional.scala 39:67]
            frameBuffer <= nextFrame @[FrameSend.scala 100:19]
            state <= UInt<3>("h06") @[FrameSend.scala 101:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_52 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_52 : @[Conditional.scala 39:67]
              state <= UInt<3>("h06") @[FrameSend.scala 104:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_53 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_53 : @[Conditional.scala 39:67]
                node _T_54 = and(requestFrame, io.in.valid) @[FrameSend.scala 107:25]
                when _T_54 : @[FrameSend.scala 107:40]
                  frameBuffer <= io.in.bits @[FrameSend.scala 108:21]
                  requestFrame <= UInt<1>("h00") @[FrameSend.scala 109:22]
                  state <= UInt<3>("h06") @[FrameSend.scala 110:15]
                  skip @[FrameSend.scala 107:40]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_56 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                when _T_56 : @[Conditional.scala 39:67]
                  node _T_58 = lt(counter, UInt<6>("h024")) @[FrameSend.scala 114:20]
                  when _T_58 : @[FrameSend.scala 114:42]
                    node _T_60 = sub(UInt<6>("h024"), counter) @[FrameSend.scala 115:48]
                    node _T_61 = asUInt(_T_60) @[FrameSend.scala 115:48]
                    node _T_62 = tail(_T_61, 1) @[FrameSend.scala 115:48]
                    node _T_64 = sub(_T_62, UInt<1>("h01")) @[FrameSend.scala 115:58]
                    node _T_65 = asUInt(_T_64) @[FrameSend.scala 115:58]
                    node _T_66 = tail(_T_65, 1) @[FrameSend.scala 115:58]
                    node _T_67 = dshr(frameBuffer, _T_66) @[FrameSend.scala 115:27]
                    node _T_68 = bits(_T_67, 0, 0) @[FrameSend.scala 115:27]
                    out <= _T_68 @[FrameSend.scala 115:13]
                    node _T_70 = add(counter, UInt<1>("h01")) @[FrameSend.scala 116:28]
                    node _T_71 = tail(_T_70, 1) @[FrameSend.scala 116:28]
                    counter <= _T_71 @[FrameSend.scala 116:17]
                    node _T_73 = eq(counter, UInt<6>("h023")) @[FrameSend.scala 117:22]
                    when _T_73 : @[FrameSend.scala 117:50]
                      state <= UInt<3>("h00") @[FrameSend.scala 118:17]
                      skip @[FrameSend.scala 117:50]
                    skip @[FrameSend.scala 114:42]
                  skip @[Conditional.scala 39:67]
    
  module OOKTx : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : UInt<1>, flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>, flip crcPassAsRx : UInt<1>, flip crcFailAsRx : UInt<1>, flip resendAsTx : UInt<1>, flip sendAsTx : UInt<1>}
    
    inst crcEncode of CRCEncode @[OOKTx.scala 35:25]
    crcEncode.clock <= clock
    crcEncode.reset <= reset
    inst frameStackTx of FrameStack @[OOKTx.scala 36:28]
    frameStackTx.clock <= clock
    frameStackTx.reset <= reset
    inst frameSend of FrameSend @[OOKTx.scala 37:25]
    frameSend.clock <= clock
    frameSend.reset <= reset
    io.out <= frameSend.io.out @[OOKTx.scala 40:10]
    crcEncode.io.in.bits <= io.in.bits @[OOKTx.scala 41:19]
    crcEncode.io.in.valid <= io.in.valid @[OOKTx.scala 41:19]
    io.in.ready <= crcEncode.io.in.ready @[OOKTx.scala 41:19]
    crcEncode.io.divisor <= io.divisor @[OOKTx.scala 42:24]
    crcEncode.io.frameBits <= io.frameBits @[OOKTx.scala 43:26]
    crcEncode.io.frameIndex <= io.frameIndex @[OOKTx.scala 44:27]
    frameSend.io.frameBits <= io.frameBits @[OOKTx.scala 45:26]
    frameSend.io.crcPassAsRx <= io.crcPassAsRx @[OOKTx.scala 46:28]
    frameSend.io.crcFailAsRx <= io.crcFailAsRx @[OOKTx.scala 47:28]
    frameSend.io.resendAsTx <= io.resendAsTx @[OOKTx.scala 48:27]
    frameSend.io.sendAsTx <= io.sendAsTx @[OOKTx.scala 49:25]
    frameStackTx.io.in.bits <= crcEncode.io.out.bits @[OOKTx.scala 52:20]
    frameStackTx.io.in.valid <= crcEncode.io.out.valid @[OOKTx.scala 52:20]
    crcEncode.io.out.ready <= frameStackTx.io.in.ready @[OOKTx.scala 52:20]
    frameSend.io.in.bits <= frameStackTx.io.out.bits @[OOKTx.scala 55:23]
    frameSend.io.in.valid <= frameStackTx.io.out.valid @[OOKTx.scala 55:23]
    frameStackTx.io.out.ready <= frameSend.io.in.ready @[OOKTx.scala 55:23]
    
  module FrameSync : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, flip frameBits : UInt<4>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, crcPass : UInt<1>, crcFail : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[FrameSync.scala 34:18]
    node _T_12 = eq(state, UInt<3>("h02")) @[FrameSync.scala 36:29]
    node _T_15 = mux(_T_12, UInt<1>("h01"), UInt<1>("h00")) @[FrameSync.scala 36:22]
    io.out.valid <= _T_15 @[FrameSync.scala 36:16]
    reg wholeFrame : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameSync.scala 38:27]
    io.out.bits <= wholeFrame @[FrameSync.scala 39:15]
    reg bitCounter : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FrameSync.scala 41:27]
    reg frameBitsReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[FrameSync.scala 43:29]
    wire syncOk : UInt<1> @[FrameSync.scala 45:20]
    node _T_23 = eq(frameBitsReg, io.frameBits) @[FrameSync.scala 46:27]
    syncOk <= _T_23 @[FrameSync.scala 46:10]
    node _T_24 = eq(state, UInt<3>("h04")) @[FrameSync.scala 48:27]
    node _T_27 = mux(_T_24, UInt<1>("h01"), UInt<1>("h00")) @[FrameSync.scala 48:20]
    io.crcPass <= _T_27 @[FrameSync.scala 48:14]
    node _T_28 = eq(state, UInt<3>("h03")) @[FrameSync.scala 49:27]
    node _T_31 = mux(_T_28, UInt<1>("h01"), UInt<1>("h00")) @[FrameSync.scala 49:20]
    io.crcFail <= _T_31 @[FrameSync.scala 49:14]
    node resendFrame = cat(io.frameBits, UInt<32>("h00")) @[Cat.scala 30:58]
    node nextFrame = cat(io.frameBits, UInt<32>("h0a")) @[Cat.scala 30:58]
    node _T_32 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_32 : @[Conditional.scala 40:58]
      node _T_34 = eq(syncOk, UInt<1>("h00")) @[FrameSync.scala 57:12]
      when _T_34 : @[FrameSync.scala 57:20]
        node _T_35 = shl(frameBitsReg, 1) @[FrameSync.scala 58:40]
        node _T_36 = or(_T_35, io.in) @[FrameSync.scala 58:46]
        frameBitsReg <= _T_36 @[FrameSync.scala 58:22]
        bitCounter <= UInt<1>("h00") @[FrameSync.scala 59:20]
        skip @[FrameSync.scala 57:20]
      else : @[FrameSync.scala 60:18]
        node _T_39 = add(bitCounter, UInt<1>("h01")) @[FrameSync.scala 61:34]
        node _T_40 = tail(_T_39, 1) @[FrameSync.scala 61:34]
        bitCounter <= _T_40 @[FrameSync.scala 61:20]
        node _T_41 = shl(io.frameBits, 1) @[FrameSync.scala 62:37]
        node _T_42 = or(_T_41, io.in) @[FrameSync.scala 62:43]
        wholeFrame <= _T_42 @[FrameSync.scala 62:20]
        state <= UInt<3>("h01") @[FrameSync.scala 63:15]
        skip @[FrameSync.scala 60:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_43 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_43 : @[Conditional.scala 39:67]
        node _T_45 = lt(bitCounter, UInt<6>("h020")) @[FrameSync.scala 67:23]
        when _T_45 : @[FrameSync.scala 67:64]
          node _T_47 = add(bitCounter, UInt<1>("h01")) @[FrameSync.scala 68:34]
          node _T_48 = tail(_T_47, 1) @[FrameSync.scala 68:34]
          bitCounter <= _T_48 @[FrameSync.scala 68:20]
          node _T_49 = shl(wholeFrame, 1) @[FrameSync.scala 69:35]
          node _T_50 = or(_T_49, io.in) @[FrameSync.scala 69:41]
          wholeFrame <= _T_50 @[FrameSync.scala 69:20]
          skip @[FrameSync.scala 67:64]
        else : @[FrameSync.scala 70:73]
          node _T_52 = geq(bitCounter, UInt<5>("h01f")) @[FrameSync.scala 70:29]
          when _T_52 : @[FrameSync.scala 70:73]
            node _T_54 = add(bitCounter, UInt<1>("h01")) @[FrameSync.scala 71:34]
            node _T_55 = tail(_T_54, 1) @[FrameSync.scala 71:34]
            bitCounter <= _T_55 @[FrameSync.scala 71:20]
            frameBitsReg <= UInt<1>("h00") @[FrameSync.scala 72:22]
            node _T_57 = eq(wholeFrame, nextFrame) @[FrameSync.scala 73:25]
            when _T_57 : @[FrameSync.scala 73:39]
              state <= UInt<3>("h04") @[FrameSync.scala 74:17]
              skip @[FrameSync.scala 73:39]
            else : @[FrameSync.scala 75:47]
              node _T_58 = eq(wholeFrame, resendFrame) @[FrameSync.scala 75:31]
              when _T_58 : @[FrameSync.scala 75:47]
                state <= UInt<3>("h03") @[FrameSync.scala 76:17]
                skip @[FrameSync.scala 75:47]
              else : @[FrameSync.scala 77:72]
                node _T_60 = gt(bitCounter, UInt<6>("h020")) @[FrameSync.scala 77:31]
                when _T_60 : @[FrameSync.scala 77:72]
                  state <= UInt<3>("h02") @[FrameSync.scala 78:17]
                  skip @[FrameSync.scala 77:72]
            skip @[FrameSync.scala 70:73]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_61 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_61 : @[Conditional.scala 39:67]
          when io.out.ready : @[FrameSync.scala 83:25]
            bitCounter <= UInt<1>("h00") @[FrameSync.scala 84:20]
            wholeFrame <= UInt<1>("h00") @[FrameSync.scala 85:20]
            state <= UInt<3>("h00") @[FrameSync.scala 86:15]
            skip @[FrameSync.scala 83:25]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_64 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_64 : @[Conditional.scala 39:67]
            bitCounter <= UInt<1>("h00") @[FrameSync.scala 90:18]
            wholeFrame <= UInt<1>("h00") @[FrameSync.scala 91:18]
            state <= UInt<3>("h00") @[FrameSync.scala 92:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_67 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_67 : @[Conditional.scala 39:67]
              bitCounter <= UInt<1>("h00") @[FrameSync.scala 95:18]
              wholeFrame <= UInt<1>("h00") @[FrameSync.scala 96:18]
              state <= UInt<3>("h00") @[FrameSync.scala 97:13]
              skip @[Conditional.scala 39:67]
    
  module FrameStack_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}}
    
    smem stack : UInt<36>[2] @[FrameStack.scala 29:26]
    reg readAddr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 30:25]
    reg writeAddr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 31:26]
    reg stackUsed : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[FrameStack.scala 32:26]
    reg frameOut : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameStack.scala 34:25]
    wire _T_25 : UInt @[FrameStack.scala 35:25]
    _T_25 is invalid @[FrameStack.scala 35:25]
    when UInt<1>("h01") : @[FrameStack.scala 35:25]
      _T_25 <= readAddr @[FrameStack.scala 35:25]
      node _T_27 = or(_T_25, UInt<1>("h00")) @[FrameStack.scala 35:25]
      node _T_28 = bits(_T_27, 0, 0) @[FrameStack.scala 35:25]
      read mport _T_29 = stack[_T_28], clock @[FrameStack.scala 35:25]
      skip @[FrameStack.scala 35:25]
    frameOut <= _T_29 @[FrameStack.scala 35:12]
    io.out.bits <= frameOut @[FrameStack.scala 36:15]
    reg frameValidOut : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 37:30]
    io.out.valid <= frameValidOut @[FrameStack.scala 38:16]
    node _T_33 = eq(stackUsed, UInt<2>("h02")) @[FrameStack.scala 40:30]
    node _T_35 = eq(_T_33, UInt<1>("h00")) @[FrameStack.scala 40:18]
    io.in.ready <= _T_35 @[FrameStack.scala 40:15]
    node _T_36 = and(io.in.ready, io.in.valid) @[FrameStack.scala 42:20]
    when _T_36 : @[FrameStack.scala 42:35]
      write mport _T_37 = stack[writeAddr], clock
      _T_37 <= io.in.bits
      node _T_39 = add(stackUsed, UInt<1>("h01")) @[FrameStack.scala 44:28]
      node _T_40 = tail(_T_39, 1) @[FrameStack.scala 44:28]
      stackUsed <= _T_40 @[FrameStack.scala 44:15]
      frameValidOut <= UInt<1>("h00") @[FrameStack.scala 45:19]
      node _T_43 = eq(writeAddr, UInt<1>("h01")) @[FrameStack.scala 46:32]
      node _T_46 = add(writeAddr, UInt<1>("h01")) @[FrameStack.scala 46:73]
      node _T_47 = tail(_T_46, 1) @[FrameStack.scala 46:73]
      node _T_48 = mux(_T_43, UInt<1>("h00"), _T_47) @[FrameStack.scala 46:21]
      writeAddr <= _T_48 @[FrameStack.scala 46:15]
      skip @[FrameStack.scala 42:35]
    else : @[FrameStack.scala 47:64]
      node _T_50 = eq(frameValidOut, UInt<1>("h00")) @[FrameStack.scala 47:30]
      node _T_51 = and(io.out.ready, _T_50) @[FrameStack.scala 47:27]
      node _T_53 = gt(stackUsed, UInt<1>("h00")) @[FrameStack.scala 47:58]
      node _T_54 = and(_T_51, _T_53) @[FrameStack.scala 47:45]
      when _T_54 : @[FrameStack.scala 47:64]
        node _T_56 = sub(stackUsed, UInt<1>("h01")) @[FrameStack.scala 49:28]
        node _T_57 = asUInt(_T_56) @[FrameStack.scala 49:28]
        node _T_58 = tail(_T_57, 1) @[FrameStack.scala 49:28]
        stackUsed <= _T_58 @[FrameStack.scala 49:15]
        frameValidOut <= UInt<1>("h01") @[FrameStack.scala 50:19]
        node _T_61 = eq(readAddr, UInt<1>("h01")) @[FrameStack.scala 51:30]
        node _T_64 = add(readAddr, UInt<1>("h01")) @[FrameStack.scala 51:70]
        node _T_65 = tail(_T_64, 1) @[FrameStack.scala 51:70]
        node _T_66 = mux(_T_61, UInt<1>("h00"), _T_65) @[FrameStack.scala 51:20]
        readAddr <= _T_66 @[FrameStack.scala 51:14]
        skip @[FrameStack.scala 47:64]
      else : @[FrameStack.scala 52:14]
        frameValidOut <= UInt<1>("h00") @[FrameStack.scala 53:19]
        skip @[FrameStack.scala 52:14]
    
  module CRCCheck : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, flip divisor : UInt<9>, dataOutIndex : UInt<8>, crcPass : UInt<1>}
    
    reg dataOutValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCCheck.scala 31:29]
    io.out.valid <= dataOutValid @[CRCCheck.scala 32:16]
    reg crcPass : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCCheck.scala 34:24]
    io.crcPass <= crcPass @[CRCCheck.scala 35:14]
    reg requestFrame : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCCheck.scala 37:29]
    io.in.ready <= requestFrame @[CRCCheck.scala 38:15]
    reg frameIndex : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[CRCCheck.scala 40:27]
    reg frameIn : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[CRCCheck.scala 42:24]
    node _T_25 = bits(frameIn, 23, 8) @[CRCCheck.scala 43:25]
    io.out.bits <= _T_25 @[CRCCheck.scala 43:15]
    node _T_26 = bits(frameIn, 31, 24) @[CRCCheck.scala 44:29]
    io.dataOutIndex <= _T_26 @[CRCCheck.scala 44:19]
    reg dataCal : UInt<24>, clock with : (reset => (reset, UInt<24>("h00"))) @[CRCCheck.scala 46:24]
    reg counter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[CRCCheck.scala 48:24]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CRCCheck.scala 52:18]
    node _T_32 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_32 : @[Conditional.scala 40:58]
      dataOutValid <= UInt<1>("h00") @[CRCCheck.scala 58:20]
      requestFrame <= UInt<1>("h01") @[CRCCheck.scala 59:20]
      when io.in.valid : @[CRCCheck.scala 60:24]
        requestFrame <= UInt<1>("h00") @[CRCCheck.scala 61:22]
        frameIn <= io.in.bits @[CRCCheck.scala 62:17]
        node _T_36 = bits(io.in.bits, 23, 0) @[CRCCheck.scala 63:30]
        dataCal <= _T_36 @[CRCCheck.scala 63:17]
        node _T_37 = bits(io.in.bits, 31, 24) @[CRCCheck.scala 64:33]
        frameIndex <= _T_37 @[CRCCheck.scala 64:20]
        counter <= UInt<1>("h00") @[CRCCheck.scala 65:17]
        state <= UInt<2>("h01") @[CRCCheck.scala 66:15]
        skip @[CRCCheck.scala 60:24]
      else : @[CRCCheck.scala 67:18]
        requestFrame <= UInt<1>("h01") @[CRCCheck.scala 68:22]
        skip @[CRCCheck.scala 67:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_40 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_40 : @[Conditional.scala 39:67]
        node _T_42 = eq(dataCal, UInt<1>("h00")) @[CRCCheck.scala 73:21]
        node _T_43 = eq(dataCal, io.divisor) @[CRCCheck.scala 73:39]
        node _T_44 = or(_T_42, _T_43) @[CRCCheck.scala 73:29]
        when _T_44 : @[CRCCheck.scala 73:55]
          crcPass <= UInt<1>("h01") @[CRCCheck.scala 74:17]
          state <= UInt<2>("h02") @[CRCCheck.scala 75:15]
          skip @[CRCCheck.scala 73:55]
        else : @[CRCCheck.scala 76:39]
          node _T_46 = lt(dataCal, io.divisor) @[CRCCheck.scala 76:26]
          when _T_46 : @[CRCCheck.scala 76:39]
            crcPass <= UInt<1>("h00") @[CRCCheck.scala 77:17]
            state <= UInt<2>("h02") @[CRCCheck.scala 78:15]
            skip @[CRCCheck.scala 76:39]
          else : @[CRCCheck.scala 79:18]
            node _T_49 = add(counter, UInt<1>("h01")) @[CRCCheck.scala 80:28]
            node _T_50 = tail(_T_49, 1) @[CRCCheck.scala 80:28]
            counter <= _T_50 @[CRCCheck.scala 80:17]
            node _T_53 = sub(UInt<5>("h018"), UInt<1>("h01")) @[CRCCheck.scala 81:59]
            node _T_54 = asUInt(_T_53) @[CRCCheck.scala 81:59]
            node _T_55 = tail(_T_54, 1) @[CRCCheck.scala 81:59]
            node _T_56 = sub(_T_55, counter) @[CRCCheck.scala 81:63]
            node _T_57 = asUInt(_T_56) @[CRCCheck.scala 81:63]
            node _T_58 = tail(_T_57, 1) @[CRCCheck.scala 81:63]
            node _T_59 = dshr(dataCal, _T_58) @[CRCCheck.scala 81:21]
            node _T_60 = bits(_T_59, 0, 0) @[CRCCheck.scala 81:21]
            node _T_62 = eq(_T_60, UInt<1>("h01")) @[CRCCheck.scala 81:73]
            when _T_62 : @[CRCCheck.scala 81:81]
              node _T_64 = eq(counter, UInt<1>("h00")) @[CRCCheck.scala 82:24]
              when _T_64 : @[CRCCheck.scala 82:32]
                node _T_65 = bits(dataCal, 23, 15) @[CRCCheck.scala 83:36]
                node _T_66 = xor(_T_65, io.divisor) @[CRCCheck.scala 83:83]
                node _T_67 = bits(dataCal, 14, 0) @[CRCCheck.scala 83:104]
                node _T_68 = cat(_T_66, _T_67) @[Cat.scala 30:58]
                dataCal <= _T_68 @[CRCCheck.scala 83:21]
                skip @[CRCCheck.scala 82:32]
              else : @[CRCCheck.scala 84:22]
                node _T_71 = sub(counter, UInt<1>("h01")) @[CRCCheck.scala 85:56]
                node _T_72 = asUInt(_T_71) @[CRCCheck.scala 85:56]
                node _T_73 = tail(_T_72, 1) @[CRCCheck.scala 85:56]
                node _T_74 = dshl(UInt<1>("h00"), _T_73) @[CRCCheck.scala 85:45]
                node _T_75 = dshl(dataCal, counter) @[CRCCheck.scala 86:34]
                node _T_76 = bits(_T_75, 23, 0) @[CRCCheck.scala 86:44]
                node _T_77 = shr(_T_76, 15) @[CRCCheck.scala 86:76]
                node _T_78 = xor(_T_77, io.divisor) @[CRCCheck.scala 86:95]
                node _T_80 = add(UInt<4>("h09"), counter) @[CRCCheck.scala 87:58]
                node _T_81 = tail(_T_80, 1) @[CRCCheck.scala 87:58]
                node _T_82 = dshl(dataCal, _T_81) @[CRCCheck.scala 87:38]
                node _T_83 = bits(_T_82, 23, 0) @[CRCCheck.scala 87:68]
                node _T_85 = add(UInt<4>("h09"), counter) @[CRCCheck.scala 87:121]
                node _T_86 = tail(_T_85, 1) @[CRCCheck.scala 87:121]
                node _T_87 = dshr(_T_83, _T_86) @[CRCCheck.scala 87:102]
                node _T_88 = cat(_T_74, _T_78) @[Cat.scala 30:58]
                node _T_91 = sub(UInt<5>("h018"), UInt<4>("h09")) @[CRCCheck.scala 88:84]
                node _T_92 = asUInt(_T_91) @[CRCCheck.scala 88:84]
                node _T_93 = tail(_T_92, 1) @[CRCCheck.scala 88:84]
                node _T_94 = sub(_T_93, counter) @[CRCCheck.scala 88:106]
                node _T_95 = asUInt(_T_94) @[CRCCheck.scala 88:106]
                node _T_96 = tail(_T_95, 1) @[CRCCheck.scala 88:106]
                node _T_97 = dshl(_T_88, _T_96) @[CRCCheck.scala 88:44]
                node _T_98 = or(_T_97, _T_87) @[CRCCheck.scala 88:116]
                dataCal <= _T_98 @[CRCCheck.scala 88:21]
                skip @[CRCCheck.scala 84:22]
              skip @[CRCCheck.scala 81:81]
            skip @[CRCCheck.scala 79:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_99 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_99 : @[Conditional.scala 39:67]
          node _T_101 = eq(dataOutValid, UInt<1>("h00")) @[CRCCheck.scala 95:28]
          node _T_102 = and(io.out.ready, _T_101) @[CRCCheck.scala 95:25]
          when _T_102 : @[CRCCheck.scala 95:42]
            dataOutValid <= UInt<1>("h01") @[CRCCheck.scala 96:22]
            state <= UInt<2>("h00") @[CRCCheck.scala 97:15]
            skip @[CRCCheck.scala 95:42]
          skip @[Conditional.scala 39:67]
    
  module OOKRx : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, flip frameBits : UInt<4>, flip divisor : UInt<9>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, dataOutIndex : UInt<8>, crcPass : UInt<1>, crcPassAsTx : UInt<1>, crcFailAsTx : UInt<1>}
    
    inst frameSync of FrameSync @[OOKRx.scala 34:25]
    frameSync.clock <= clock
    frameSync.reset <= reset
    inst frameStackRx of FrameStack_1 @[OOKRx.scala 35:28]
    frameStackRx.clock <= clock
    frameStackRx.reset <= reset
    inst crcCheck of CRCCheck @[OOKRx.scala 36:24]
    crcCheck.clock <= clock
    crcCheck.reset <= reset
    frameSync.io.in <= io.in @[OOKRx.scala 39:19]
    frameSync.io.frameBits <= io.frameBits @[OOKRx.scala 40:26]
    crcCheck.io.divisor <= io.divisor @[OOKRx.scala 41:23]
    io.out.bits <= crcCheck.io.out.bits @[OOKRx.scala 42:10]
    io.out.valid <= crcCheck.io.out.valid @[OOKRx.scala 42:10]
    crcCheck.io.out.ready <= io.out.ready @[OOKRx.scala 42:10]
    io.dataOutIndex <= crcCheck.io.dataOutIndex @[OOKRx.scala 43:19]
    io.crcPass <= crcCheck.io.crcPass @[OOKRx.scala 44:14]
    io.crcPassAsTx <= frameSync.io.crcPass @[OOKRx.scala 45:18]
    io.crcFailAsTx <= frameSync.io.crcFail @[OOKRx.scala 46:18]
    frameStackRx.io.in.bits <= frameSync.io.out.bits @[OOKRx.scala 49:20]
    frameStackRx.io.in.valid <= frameSync.io.out.valid @[OOKRx.scala 49:20]
    frameSync.io.out.ready <= frameStackRx.io.in.ready @[OOKRx.scala 49:20]
    crcCheck.io.in.bits <= frameStackRx.io.out.bits @[OOKRx.scala 52:23]
    crcCheck.io.in.valid <= frameStackRx.io.out.valid @[OOKRx.scala 52:23]
    frameStackRx.io.out.ready <= crcCheck.io.in.ready @[OOKRx.scala 52:23]
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    smem mem : UInt<16>[100] @[DataMemory.scala 37:24]
    reg memUsage : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 42:25]
    reg writeAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 43:26]
    reg readAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 44:25]
    node _T_19 = eq(memUsage, UInt<1>("h00")) @[DataMemory.scala 46:32]
    node _T_22 = mux(_T_19, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 46:22]
    io.out.valid <= _T_22 @[DataMemory.scala 46:16]
    wire _T_25 : UInt @[DataMemory.scala 47:26]
    _T_25 is invalid @[DataMemory.scala 47:26]
    when UInt<1>("h01") : @[DataMemory.scala 47:26]
      _T_25 <= readAddr @[DataMemory.scala 47:26]
      node _T_27 = or(_T_25, UInt<7>("h00")) @[DataMemory.scala 47:26]
      node _T_28 = bits(_T_27, 6, 0) @[DataMemory.scala 47:26]
      read mport _T_29 = mem[_T_28], clock @[DataMemory.scala 47:26]
      skip @[DataMemory.scala 47:26]
    io.out.bits <= _T_29 @[DataMemory.scala 47:15]
    node _T_31 = eq(memUsage, UInt<7>("h064")) @[DataMemory.scala 48:31]
    node _T_34 = mux(_T_31, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 48:21]
    io.in.ready <= _T_34 @[DataMemory.scala 48:15]
    when io.in.ready : @[DataMemory.scala 50:20]
      when io.in.valid : @[DataMemory.scala 51:22]
        write mport _T_35 = mem[writeAddr], clock
        _T_35 <= io.in.bits
        node _T_37 = eq(writeAddr, UInt<7>("h063")) @[DataMemory.scala 53:34]
        node _T_40 = add(writeAddr, UInt<1>("h01")) @[DataMemory.scala 53:71]
        node _T_41 = tail(_T_40, 1) @[DataMemory.scala 53:71]
        node _T_42 = mux(_T_37, UInt<1>("h00"), _T_41) @[DataMemory.scala 53:23]
        writeAddr <= _T_42 @[DataMemory.scala 53:17]
        node _T_44 = add(memUsage, UInt<1>("h01")) @[DataMemory.scala 54:28]
        node _T_45 = tail(_T_44, 1) @[DataMemory.scala 54:28]
        memUsage <= _T_45 @[DataMemory.scala 54:16]
        skip @[DataMemory.scala 51:22]
      else : @[DataMemory.scala 55:45]
        node _T_46 = and(io.out.valid, io.out.ready) @[DataMemory.scala 55:29]
        when _T_46 : @[DataMemory.scala 55:45]
          node _T_48 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 56:32]
          node _T_51 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 56:68]
          node _T_52 = tail(_T_51, 1) @[DataMemory.scala 56:68]
          node _T_53 = mux(_T_48, UInt<1>("h00"), _T_52) @[DataMemory.scala 56:22]
          readAddr <= _T_53 @[DataMemory.scala 56:16]
          node _T_55 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 57:28]
          node _T_56 = asUInt(_T_55) @[DataMemory.scala 57:28]
          node _T_57 = tail(_T_56, 1) @[DataMemory.scala 57:28]
          memUsage <= _T_57 @[DataMemory.scala 57:16]
          skip @[DataMemory.scala 55:45]
      skip @[DataMemory.scala 50:20]
    else : @[DataMemory.scala 59:14]
      when io.out.ready : @[DataMemory.scala 60:23]
        node _T_59 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 61:32]
        node _T_62 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 61:68]
        node _T_63 = tail(_T_62, 1) @[DataMemory.scala 61:68]
        node _T_64 = mux(_T_59, UInt<1>("h00"), _T_63) @[DataMemory.scala 61:22]
        readAddr <= _T_64 @[DataMemory.scala 61:16]
        node _T_66 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 62:28]
        node _T_67 = asUInt(_T_66) @[DataMemory.scala 62:28]
        node _T_68 = tail(_T_67, 1) @[DataMemory.scala 62:28]
        memUsage <= _T_68 @[DataMemory.scala 62:16]
        skip @[DataMemory.scala 60:23]
      skip @[DataMemory.scala 59:14]
    
  module DataMemory_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    smem mem : UInt<16>[100] @[DataMemory.scala 37:24]
    reg memUsage : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 42:25]
    reg writeAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 43:26]
    reg readAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 44:25]
    node _T_19 = eq(memUsage, UInt<1>("h00")) @[DataMemory.scala 46:32]
    node _T_22 = mux(_T_19, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 46:22]
    io.out.valid <= _T_22 @[DataMemory.scala 46:16]
    wire _T_25 : UInt @[DataMemory.scala 47:26]
    _T_25 is invalid @[DataMemory.scala 47:26]
    when UInt<1>("h01") : @[DataMemory.scala 47:26]
      _T_25 <= readAddr @[DataMemory.scala 47:26]
      node _T_27 = or(_T_25, UInt<7>("h00")) @[DataMemory.scala 47:26]
      node _T_28 = bits(_T_27, 6, 0) @[DataMemory.scala 47:26]
      read mport _T_29 = mem[_T_28], clock @[DataMemory.scala 47:26]
      skip @[DataMemory.scala 47:26]
    io.out.bits <= _T_29 @[DataMemory.scala 47:15]
    node _T_31 = eq(memUsage, UInt<7>("h064")) @[DataMemory.scala 48:31]
    node _T_34 = mux(_T_31, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 48:21]
    io.in.ready <= _T_34 @[DataMemory.scala 48:15]
    when io.in.ready : @[DataMemory.scala 50:20]
      when io.in.valid : @[DataMemory.scala 51:22]
        write mport _T_35 = mem[writeAddr], clock
        _T_35 <= io.in.bits
        node _T_37 = eq(writeAddr, UInt<7>("h063")) @[DataMemory.scala 53:34]
        node _T_40 = add(writeAddr, UInt<1>("h01")) @[DataMemory.scala 53:71]
        node _T_41 = tail(_T_40, 1) @[DataMemory.scala 53:71]
        node _T_42 = mux(_T_37, UInt<1>("h00"), _T_41) @[DataMemory.scala 53:23]
        writeAddr <= _T_42 @[DataMemory.scala 53:17]
        node _T_44 = add(memUsage, UInt<1>("h01")) @[DataMemory.scala 54:28]
        node _T_45 = tail(_T_44, 1) @[DataMemory.scala 54:28]
        memUsage <= _T_45 @[DataMemory.scala 54:16]
        skip @[DataMemory.scala 51:22]
      else : @[DataMemory.scala 55:45]
        node _T_46 = and(io.out.valid, io.out.ready) @[DataMemory.scala 55:29]
        when _T_46 : @[DataMemory.scala 55:45]
          node _T_48 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 56:32]
          node _T_51 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 56:68]
          node _T_52 = tail(_T_51, 1) @[DataMemory.scala 56:68]
          node _T_53 = mux(_T_48, UInt<1>("h00"), _T_52) @[DataMemory.scala 56:22]
          readAddr <= _T_53 @[DataMemory.scala 56:16]
          node _T_55 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 57:28]
          node _T_56 = asUInt(_T_55) @[DataMemory.scala 57:28]
          node _T_57 = tail(_T_56, 1) @[DataMemory.scala 57:28]
          memUsage <= _T_57 @[DataMemory.scala 57:16]
          skip @[DataMemory.scala 55:45]
      skip @[DataMemory.scala 50:20]
    else : @[DataMemory.scala 59:14]
      when io.out.ready : @[DataMemory.scala 60:23]
        node _T_59 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 61:32]
        node _T_62 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 61:68]
        node _T_63 = tail(_T_62, 1) @[DataMemory.scala 61:68]
        node _T_64 = mux(_T_59, UInt<1>("h00"), _T_63) @[DataMemory.scala 61:22]
        readAddr <= _T_64 @[DataMemory.scala 61:16]
        node _T_66 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 62:28]
        node _T_67 = asUInt(_T_66) @[DataMemory.scala 62:28]
        node _T_68 = tail(_T_67, 1) @[DataMemory.scala 62:28]
        memUsage <= _T_68 @[DataMemory.scala 62:16]
        skip @[DataMemory.scala 60:23]
      skip @[DataMemory.scala 59:14]
    
  module TopControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>, bitTx : UInt<1>, flip bitRx : UInt<1>, flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[TopControl.scala 40:18]
    inst ooktx of OOKTx @[TopControl.scala 43:21]
    ooktx.clock <= clock
    ooktx.reset <= reset
    inst ookrx of OOKRx @[TopControl.scala 44:21]
    ookrx.clock <= clock
    ookrx.reset <= reset
    inst txMemory of DataMemory @[TopControl.scala 47:24]
    txMemory.clock <= clock
    txMemory.reset <= reset
    inst rxMemory of DataMemory_1 @[TopControl.scala 48:24]
    rxMemory.clock <= clock
    rxMemory.reset <= reset
    reg counter : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[TopControl.scala 51:24]
    node _T_21 = eq(state, UInt<4>("h07")) @[TopControl.scala 53:14]
    node _T_22 = eq(state, UInt<4>("h08")) @[TopControl.scala 53:40]
    node _T_23 = or(_T_21, _T_22) @[TopControl.scala 53:31]
    when _T_23 : @[TopControl.scala 53:57]
      counter <= UInt<1>("h00") @[TopControl.scala 54:13]
      skip @[TopControl.scala 53:57]
    else : @[TopControl.scala 55:14]
      node _T_26 = add(counter, UInt<1>("h01")) @[TopControl.scala 56:24]
      node _T_27 = tail(_T_26, 1) @[TopControl.scala 56:24]
      counter <= _T_27 @[TopControl.scala 56:13]
      skip @[TopControl.scala 55:14]
    reg firstTx : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[TopControl.scala 59:24]
    node _T_30 = eq(state, UInt<4>("h07")) @[TopControl.scala 60:14]
    node _T_31 = eq(state, UInt<4>("h08")) @[TopControl.scala 60:40]
    node _T_32 = or(_T_30, _T_31) @[TopControl.scala 60:31]
    when _T_32 : @[TopControl.scala 60:57]
      firstTx <= UInt<1>("h00") @[TopControl.scala 61:13]
      skip @[TopControl.scala 60:57]
    else : @[TopControl.scala 62:37]
      node _T_35 = eq(txMemory.io.out.valid, UInt<1>("h00")) @[TopControl.scala 62:14]
      when _T_35 : @[TopControl.scala 62:37]
        firstTx <= UInt<1>("h01") @[TopControl.scala 63:13]
        skip @[TopControl.scala 62:37]
    reg txMode : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TopControl.scala 66:23]
    when txMemory.io.out.valid : @[TopControl.scala 67:30]
      txMode <= UInt<1>("h01") @[TopControl.scala 68:12]
      skip @[TopControl.scala 67:30]
    else : @[TopControl.scala 69:33]
      when ookrx.io.out.valid : @[TopControl.scala 69:33]
        txMode <= UInt<1>("h00") @[TopControl.scala 70:12]
        skip @[TopControl.scala 69:33]
    ooktx.io.frameBits <= io.frameBits @[TopControl.scala 74:22]
    ooktx.io.frameIndex <= io.frameIndex @[TopControl.scala 75:23]
    ooktx.io.divisor <= io.divisor @[TopControl.scala 76:20]
    io.bitTx <= ooktx.io.out @[TopControl.scala 77:12]
    ookrx.io.frameBits <= io.frameBits @[TopControl.scala 80:22]
    ookrx.io.divisor <= io.divisor @[TopControl.scala 81:20]
    ookrx.io.in <= io.bitRx @[TopControl.scala 82:15]
    reg loadDataBuffer : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[TopControl.scala 85:31]
    node _T_43 = eq(state, UInt<4>("h00")) @[TopControl.scala 88:35]
    node _T_46 = mux(_T_43, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 88:28]
    ookrx.io.out.ready <= _T_46 @[TopControl.scala 88:22]
    rxMemory.io.in.bits <= ookrx.io.out.bits @[TopControl.scala 91:23]
    node _T_47 = eq(state, UInt<4>("h01")) @[TopControl.scala 92:37]
    node _T_50 = mux(_T_47, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 92:30]
    rxMemory.io.in.valid <= _T_50 @[TopControl.scala 92:24]
    io.out.bits <= rxMemory.io.out.bits @[TopControl.scala 95:15]
    node _T_51 = eq(state, UInt<4>("h02")) @[TopControl.scala 96:29]
    node _T_54 = mux(_T_51, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 96:22]
    io.out.valid <= _T_54 @[TopControl.scala 96:16]
    node _T_55 = eq(state, UInt<4>("h02")) @[TopControl.scala 97:38]
    node _T_58 = mux(_T_55, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 97:31]
    rxMemory.io.out.ready <= _T_58 @[TopControl.scala 97:25]
    ooktx.io.in.bits <= txMemory.io.out.bits @[TopControl.scala 100:20]
    node _T_59 = eq(state, UInt<4>("h03")) @[TopControl.scala 101:34]
    node _T_62 = mux(_T_59, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 101:27]
    ooktx.io.in.valid <= _T_62 @[TopControl.scala 101:21]
    node _T_63 = eq(state, UInt<4>("h03")) @[TopControl.scala 102:38]
    node _T_66 = mux(_T_63, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 102:31]
    txMemory.io.out.ready <= _T_66 @[TopControl.scala 102:25]
    txMemory.io.in.bits <= loadDataBuffer @[TopControl.scala 105:23]
    node _T_67 = eq(state, UInt<4>("h04")) @[TopControl.scala 106:37]
    node _T_70 = mux(_T_67, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 106:30]
    txMemory.io.in.valid <= _T_70 @[TopControl.scala 106:24]
    node _T_71 = eq(state, UInt<4>("h04")) @[TopControl.scala 107:28]
    node _T_74 = mux(_T_71, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 107:21]
    io.in.ready <= _T_74 @[TopControl.scala 107:15]
    node _T_75 = eq(state, UInt<4>("h05")) @[TopControl.scala 110:37]
    node _T_78 = mux(_T_75, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 110:30]
    ooktx.io.crcPassAsRx <= _T_78 @[TopControl.scala 110:24]
    node _T_79 = eq(state, UInt<4>("h06")) @[TopControl.scala 111:37]
    node _T_82 = mux(_T_79, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 111:30]
    ooktx.io.crcFailAsRx <= _T_82 @[TopControl.scala 111:24]
    node _T_83 = eq(state, UInt<4>("h08")) @[TopControl.scala 114:36]
    node _T_86 = mux(_T_83, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 114:29]
    ooktx.io.resendAsTx <= _T_86 @[TopControl.scala 114:23]
    node _T_87 = eq(state, UInt<4>("h07")) @[TopControl.scala 115:34]
    node _T_90 = mux(_T_87, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 115:27]
    ooktx.io.sendAsTx <= _T_90 @[TopControl.scala 115:21]
    reg crcPassAsTx : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TopControl.scala 118:28]
    reg crcFailAsTx : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TopControl.scala 119:28]
    node _T_95 = eq(counter, UInt<10>("h03e8")) @[TopControl.scala 121:41]
    node _T_96 = and(_T_95, firstTx) @[TopControl.scala 121:56]
    node _T_97 = or(ookrx.io.crcPassAsTx, _T_96) @[TopControl.scala 121:29]
    when _T_97 : @[TopControl.scala 121:68]
      crcPassAsTx <= UInt<1>("h01") @[TopControl.scala 122:17]
      skip @[TopControl.scala 121:68]
    else : @[TopControl.scala 123:37]
      node _T_99 = eq(state, UInt<4>("h07")) @[TopControl.scala 123:20]
      when _T_99 : @[TopControl.scala 123:37]
        crcPassAsTx <= UInt<1>("h00") @[TopControl.scala 124:17]
        skip @[TopControl.scala 123:37]
    node _T_101 = eq(counter, UInt<10>("h03e8")) @[TopControl.scala 126:41]
    node _T_103 = eq(firstTx, UInt<1>("h00")) @[TopControl.scala 126:59]
    node _T_104 = and(_T_101, _T_103) @[TopControl.scala 126:56]
    node _T_105 = or(ookrx.io.crcFailAsTx, _T_104) @[TopControl.scala 126:29]
    when _T_105 : @[TopControl.scala 126:69]
      crcFailAsTx <= UInt<1>("h01") @[TopControl.scala 127:17]
      skip @[TopControl.scala 126:69]
    else : @[TopControl.scala 128:37]
      node _T_107 = eq(state, UInt<4>("h08")) @[TopControl.scala 128:20]
      when _T_107 : @[TopControl.scala 128:37]
        crcFailAsTx <= UInt<1>("h00") @[TopControl.scala 129:17]
        skip @[TopControl.scala 128:37]
    node _T_109 = eq(UInt<4>("h00"), state) @[Conditional.scala 37:30]
    when _T_109 : @[Conditional.scala 40:58]
      node _T_110 = and(crcPassAsTx, txMode) @[TopControl.scala 141:24]
      when _T_110 : @[TopControl.scala 141:34]
        state <= UInt<4>("h07") @[TopControl.scala 142:15]
        skip @[TopControl.scala 141:34]
      else : @[TopControl.scala 143:40]
        node _T_111 = and(crcFailAsTx, txMode) @[TopControl.scala 143:30]
        when _T_111 : @[TopControl.scala 143:40]
          state <= UInt<4>("h08") @[TopControl.scala 144:15]
          skip @[TopControl.scala 143:40]
        else : @[TopControl.scala 145:48]
          node _T_113 = eq(txMode, UInt<1>("h00")) @[TopControl.scala 145:40]
          node _T_114 = and(ookrx.io.out.valid, _T_113) @[TopControl.scala 145:37]
          when _T_114 : @[TopControl.scala 145:48]
            when ookrx.io.crcPass : @[TopControl.scala 146:31]
              state <= UInt<4>("h05") @[TopControl.scala 147:17]
              skip @[TopControl.scala 146:31]
            else : @[TopControl.scala 148:20]
              state <= UInt<4>("h06") @[TopControl.scala 149:17]
              skip @[TopControl.scala 148:20]
            skip @[TopControl.scala 145:48]
          else : @[TopControl.scala 151:56]
            node _T_115 = and(io.out.ready, rxMemory.io.out.valid) @[TopControl.scala 151:31]
            when _T_115 : @[TopControl.scala 151:56]
              state <= UInt<4>("h02") @[TopControl.scala 152:15]
              skip @[TopControl.scala 151:56]
            else : @[TopControl.scala 153:61]
              node _T_116 = and(ooktx.io.in.ready, txMemory.io.out.valid) @[TopControl.scala 153:36]
              when _T_116 : @[TopControl.scala 153:61]
                state <= UInt<4>("h03") @[TopControl.scala 154:15]
                skip @[TopControl.scala 153:61]
              else : @[TopControl.scala 155:54]
                node _T_117 = and(io.in.valid, txMemory.io.in.ready) @[TopControl.scala 155:30]
                when _T_117 : @[TopControl.scala 155:54]
                  loadDataBuffer <= io.in.bits @[TopControl.scala 156:24]
                  state <= UInt<4>("h04") @[TopControl.scala 157:15]
                  skip @[TopControl.scala 155:54]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_118 = eq(UInt<4>("h01"), state) @[Conditional.scala 37:30]
      when _T_118 : @[Conditional.scala 39:67]
        state <= UInt<4>("h00") @[TopControl.scala 161:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_119 = eq(UInt<4>("h02"), state) @[Conditional.scala 37:30]
        when _T_119 : @[Conditional.scala 39:67]
          state <= UInt<4>("h00") @[TopControl.scala 164:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_120 = eq(UInt<4>("h03"), state) @[Conditional.scala 37:30]
          when _T_120 : @[Conditional.scala 39:67]
            state <= UInt<4>("h00") @[TopControl.scala 167:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_121 = eq(UInt<4>("h04"), state) @[Conditional.scala 37:30]
            when _T_121 : @[Conditional.scala 39:67]
              state <= UInt<4>("h00") @[TopControl.scala 170:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_122 = eq(UInt<4>("h05"), state) @[Conditional.scala 37:30]
              when _T_122 : @[Conditional.scala 39:67]
                state <= UInt<4>("h01") @[TopControl.scala 173:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_123 = eq(UInt<4>("h06"), state) @[Conditional.scala 37:30]
                when _T_123 : @[Conditional.scala 39:67]
                  state <= UInt<4>("h00") @[TopControl.scala 176:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_124 = eq(UInt<4>("h07"), state) @[Conditional.scala 37:30]
                  when _T_124 : @[Conditional.scala 39:67]
                    state <= UInt<4>("h00") @[TopControl.scala 179:13]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_125 = eq(UInt<4>("h08"), state) @[Conditional.scala 37:30]
                    when _T_125 : @[Conditional.scala 39:67]
                      state <= UInt<4>("h00") @[TopControl.scala 182:13]
                      skip @[Conditional.scala 39:67]
    
  module CRCEncode_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>}
    
    reg counter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[CRCEncode.scala 31:24]
    reg dataExtended : UInt<24>, clock with : (reset => (reset, UInt<24>("h00"))) @[CRCEncode.scala 33:29]
    reg requestData : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[CRCEncode.scala 35:28]
    io.in.ready <= requestData @[CRCEncode.scala 36:15]
    reg validOut : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCEncode.scala 38:25]
    io.out.valid <= validOut @[CRCEncode.scala 39:16]
    reg frameBitsBuffer : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[CRCEncode.scala 41:32]
    reg frameIndexBuffer : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[CRCEncode.scala 42:33]
    reg dataInBuffer : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[CRCEncode.scala 43:29]
    reg frameOut : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[CRCEncode.scala 45:25]
    io.out.bits <= frameOut @[CRCEncode.scala 46:15]
    node _T_32 = and(io.out.ready, requestData) @[CRCEncode.scala 65:21]
    node _T_33 = and(_T_32, io.in.valid) @[CRCEncode.scala 65:36]
    when _T_33 : @[CRCEncode.scala 65:51]
      frameBitsBuffer <= io.frameBits @[CRCEncode.scala 66:21]
      frameIndexBuffer <= io.frameIndex @[CRCEncode.scala 67:22]
      dataInBuffer <= io.in.bits @[CRCEncode.scala 68:18]
      node _T_34 = shl(io.in.bits, 8) @[CRCEncode.scala 69:32]
      dataExtended <= _T_34 @[CRCEncode.scala 69:18]
      requestData <= UInt<1>("h00") @[CRCEncode.scala 70:17]
      counter <= UInt<1>("h00") @[CRCEncode.scala 71:13]
      validOut <= UInt<1>("h00") @[CRCEncode.scala 72:14]
      skip @[CRCEncode.scala 65:51]
    else : @[CRCEncode.scala 73:40]
      node _T_39 = eq(validOut, UInt<1>("h00")) @[CRCEncode.scala 73:14]
      node _T_41 = eq(requestData, UInt<1>("h00")) @[CRCEncode.scala 73:27]
      node _T_42 = and(_T_39, _T_41) @[CRCEncode.scala 73:24]
      when _T_42 : @[CRCEncode.scala 73:40]
        node _T_44 = shl(UInt<1>("h01"), 8) @[CRCEncode.scala 74:30]
        node _T_45 = lt(dataExtended, _T_44) @[CRCEncode.scala 74:23]
        when _T_45 : @[CRCEncode.scala 74:53]
          node _T_46 = bits(dataExtended, 7, 0) @[CRCEncode.scala 75:84]
          node _T_47 = cat(dataInBuffer, _T_46) @[Cat.scala 30:58]
          node _T_48 = cat(frameBitsBuffer, frameIndexBuffer) @[Cat.scala 30:58]
          node _T_49 = cat(_T_48, _T_47) @[Cat.scala 30:58]
          frameOut <= _T_49 @[CRCEncode.scala 75:16]
          validOut <= UInt<1>("h01") @[CRCEncode.scala 76:16]
          requestData <= UInt<1>("h01") @[CRCEncode.scala 77:19]
          skip @[CRCEncode.scala 74:53]
        else : @[CRCEncode.scala 78:44]
          node _T_52 = eq(dataExtended, io.divisor) @[CRCEncode.scala 78:29]
          when _T_52 : @[CRCEncode.scala 78:44]
            node _T_53 = shl(dataInBuffer, 8) @[CRCEncode.scala 79:72]
            node _T_54 = cat(frameBitsBuffer, frameIndexBuffer) @[Cat.scala 30:58]
            node _T_55 = cat(_T_54, _T_53) @[Cat.scala 30:58]
            frameOut <= _T_55 @[CRCEncode.scala 79:16]
            validOut <= UInt<1>("h01") @[CRCEncode.scala 80:16]
            requestData <= UInt<1>("h01") @[CRCEncode.scala 81:19]
            skip @[CRCEncode.scala 78:44]
          else : @[CRCEncode.scala 82:16]
            node _T_59 = add(counter, UInt<1>("h01")) @[CRCEncode.scala 83:26]
            node _T_60 = tail(_T_59, 1) @[CRCEncode.scala 83:26]
            counter <= _T_60 @[CRCEncode.scala 83:15]
            validOut <= UInt<1>("h00") @[CRCEncode.scala 84:16]
            node _T_64 = sub(UInt<5>("h018"), UInt<1>("h01")) @[CRCEncode.scala 85:62]
            node _T_65 = asUInt(_T_64) @[CRCEncode.scala 85:62]
            node _T_66 = tail(_T_65, 1) @[CRCEncode.scala 85:62]
            node _T_67 = sub(_T_66, counter) @[CRCEncode.scala 85:66]
            node _T_68 = asUInt(_T_67) @[CRCEncode.scala 85:66]
            node _T_69 = tail(_T_68, 1) @[CRCEncode.scala 85:66]
            node _T_70 = dshr(dataExtended, _T_69) @[CRCEncode.scala 85:24]
            node _T_71 = bits(_T_70, 0, 0) @[CRCEncode.scala 85:24]
            node _T_73 = eq(_T_71, UInt<1>("h01")) @[CRCEncode.scala 85:76]
            when _T_73 : @[CRCEncode.scala 85:84]
              node _T_75 = eq(counter, UInt<1>("h00")) @[CRCEncode.scala 86:22]
              when _T_75 : @[CRCEncode.scala 86:30]
                node _T_76 = bits(dataExtended, 23, 15) @[CRCEncode.scala 87:44]
                node _T_77 = xor(_T_76, io.divisor) @[CRCEncode.scala 87:91]
                node _T_78 = bits(dataExtended, 14, 0) @[CRCEncode.scala 87:117]
                node _T_79 = cat(_T_77, _T_78) @[Cat.scala 30:58]
                dataExtended <= _T_79 @[CRCEncode.scala 87:24]
                skip @[CRCEncode.scala 86:30]
              else : @[CRCEncode.scala 88:20]
                node _T_82 = sub(counter, UInt<1>("h01")) @[CRCEncode.scala 89:54]
                node _T_83 = asUInt(_T_82) @[CRCEncode.scala 89:54]
                node _T_84 = tail(_T_83, 1) @[CRCEncode.scala 89:54]
                node _T_85 = dshl(UInt<1>("h00"), _T_84) @[CRCEncode.scala 89:43]
                node _T_86 = dshl(dataExtended, counter) @[CRCEncode.scala 90:37]
                node _T_87 = bits(_T_86, 23, 0) @[CRCEncode.scala 90:47]
                node _T_88 = shr(_T_87, 15) @[CRCEncode.scala 90:79]
                node _T_89 = xor(_T_88, io.divisor) @[CRCEncode.scala 90:98]
                node _T_91 = add(UInt<4>("h09"), counter) @[CRCEncode.scala 91:61]
                node _T_92 = tail(_T_91, 1) @[CRCEncode.scala 91:61]
                node _T_93 = dshl(dataExtended, _T_92) @[CRCEncode.scala 91:41]
                node _T_94 = bits(_T_93, 23, 0) @[CRCEncode.scala 91:71]
                node _T_96 = add(UInt<4>("h09"), counter) @[CRCEncode.scala 91:124]
                node _T_97 = tail(_T_96, 1) @[CRCEncode.scala 91:124]
                node _T_98 = dshr(_T_94, _T_97) @[CRCEncode.scala 91:105]
                node _T_99 = cat(_T_85, _T_89) @[Cat.scala 30:58]
                node _T_102 = sub(UInt<5>("h018"), UInt<4>("h09")) @[CRCEncode.scala 92:87]
                node _T_103 = asUInt(_T_102) @[CRCEncode.scala 92:87]
                node _T_104 = tail(_T_103, 1) @[CRCEncode.scala 92:87]
                node _T_105 = sub(_T_104, counter) @[CRCEncode.scala 92:109]
                node _T_106 = asUInt(_T_105) @[CRCEncode.scala 92:109]
                node _T_107 = tail(_T_106, 1) @[CRCEncode.scala 92:109]
                node _T_108 = dshl(_T_99, _T_107) @[CRCEncode.scala 92:47]
                node _T_109 = or(_T_108, _T_98) @[CRCEncode.scala 92:119]
                dataExtended <= _T_109 @[CRCEncode.scala 92:24]
                skip @[CRCEncode.scala 88:20]
              skip @[CRCEncode.scala 85:84]
            skip @[CRCEncode.scala 82:16]
        skip @[CRCEncode.scala 73:40]
      else : @[CRCEncode.scala 99:14]
        validOut <= UInt<1>("h00") @[CRCEncode.scala 100:14]
        skip @[CRCEncode.scala 99:14]
    
  module FrameStack_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}}
    
    smem stack : UInt<36>[100] @[FrameStack.scala 29:26]
    reg readAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[FrameStack.scala 30:25]
    reg writeAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[FrameStack.scala 31:26]
    reg stackUsed : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[FrameStack.scala 32:26]
    reg frameOut : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameStack.scala 34:25]
    wire _T_25 : UInt @[FrameStack.scala 35:25]
    _T_25 is invalid @[FrameStack.scala 35:25]
    when UInt<1>("h01") : @[FrameStack.scala 35:25]
      _T_25 <= readAddr @[FrameStack.scala 35:25]
      node _T_27 = or(_T_25, UInt<7>("h00")) @[FrameStack.scala 35:25]
      node _T_28 = bits(_T_27, 6, 0) @[FrameStack.scala 35:25]
      read mport _T_29 = stack[_T_28], clock @[FrameStack.scala 35:25]
      skip @[FrameStack.scala 35:25]
    frameOut <= _T_29 @[FrameStack.scala 35:12]
    io.out.bits <= frameOut @[FrameStack.scala 36:15]
    reg frameValidOut : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 37:30]
    io.out.valid <= frameValidOut @[FrameStack.scala 38:16]
    node _T_33 = eq(stackUsed, UInt<7>("h064")) @[FrameStack.scala 40:30]
    node _T_35 = eq(_T_33, UInt<1>("h00")) @[FrameStack.scala 40:18]
    io.in.ready <= _T_35 @[FrameStack.scala 40:15]
    node _T_36 = and(io.in.ready, io.in.valid) @[FrameStack.scala 42:20]
    when _T_36 : @[FrameStack.scala 42:35]
      write mport _T_37 = stack[writeAddr], clock
      _T_37 <= io.in.bits
      node _T_39 = add(stackUsed, UInt<1>("h01")) @[FrameStack.scala 44:28]
      node _T_40 = tail(_T_39, 1) @[FrameStack.scala 44:28]
      stackUsed <= _T_40 @[FrameStack.scala 44:15]
      frameValidOut <= UInt<1>("h00") @[FrameStack.scala 45:19]
      node _T_43 = eq(writeAddr, UInt<7>("h063")) @[FrameStack.scala 46:32]
      node _T_46 = add(writeAddr, UInt<1>("h01")) @[FrameStack.scala 46:73]
      node _T_47 = tail(_T_46, 1) @[FrameStack.scala 46:73]
      node _T_48 = mux(_T_43, UInt<1>("h00"), _T_47) @[FrameStack.scala 46:21]
      writeAddr <= _T_48 @[FrameStack.scala 46:15]
      skip @[FrameStack.scala 42:35]
    else : @[FrameStack.scala 47:64]
      node _T_50 = eq(frameValidOut, UInt<1>("h00")) @[FrameStack.scala 47:30]
      node _T_51 = and(io.out.ready, _T_50) @[FrameStack.scala 47:27]
      node _T_53 = gt(stackUsed, UInt<1>("h00")) @[FrameStack.scala 47:58]
      node _T_54 = and(_T_51, _T_53) @[FrameStack.scala 47:45]
      when _T_54 : @[FrameStack.scala 47:64]
        node _T_56 = sub(stackUsed, UInt<1>("h01")) @[FrameStack.scala 49:28]
        node _T_57 = asUInt(_T_56) @[FrameStack.scala 49:28]
        node _T_58 = tail(_T_57, 1) @[FrameStack.scala 49:28]
        stackUsed <= _T_58 @[FrameStack.scala 49:15]
        frameValidOut <= UInt<1>("h01") @[FrameStack.scala 50:19]
        node _T_61 = eq(readAddr, UInt<7>("h063")) @[FrameStack.scala 51:30]
        node _T_64 = add(readAddr, UInt<1>("h01")) @[FrameStack.scala 51:70]
        node _T_65 = tail(_T_64, 1) @[FrameStack.scala 51:70]
        node _T_66 = mux(_T_61, UInt<1>("h00"), _T_65) @[FrameStack.scala 51:20]
        readAddr <= _T_66 @[FrameStack.scala 51:14]
        skip @[FrameStack.scala 47:64]
      else : @[FrameStack.scala 52:14]
        frameValidOut <= UInt<1>("h00") @[FrameStack.scala 53:19]
        skip @[FrameStack.scala 52:14]
    
  module FrameSend_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, flip frameBits : UInt<4>, flip crcPassAsRx : UInt<1>, flip crcFailAsRx : UInt<1>, flip sendAsTx : UInt<1>, flip resendAsTx : UInt<1>, out : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[FrameSend.scala 34:18]
    reg out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 36:20]
    io.out <= out @[FrameSend.scala 37:10]
    node resendFrame = cat(io.frameBits, UInt<32>("h00")) @[Cat.scala 30:58]
    node nextFrame = cat(io.frameBits, UInt<32>("h0a")) @[Cat.scala 30:58]
    reg crcPassAsRx : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 43:28]
    reg crcFail : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 44:24]
    reg resend : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 45:23]
    reg send : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 46:21]
    when io.crcPassAsRx : @[FrameSend.scala 47:23]
      crcPassAsRx <= UInt<1>("h01") @[FrameSend.scala 48:17]
      skip @[FrameSend.scala 47:23]
    else : @[FrameSend.scala 49:37]
      node _T_28 = eq(state, UInt<3>("h03")) @[FrameSend.scala 49:20]
      when _T_28 : @[FrameSend.scala 49:37]
        crcPassAsRx <= UInt<1>("h00") @[FrameSend.scala 50:17]
        skip @[FrameSend.scala 49:37]
    when io.crcFailAsRx : @[FrameSend.scala 52:23]
      crcFail <= UInt<1>("h01") @[FrameSend.scala 53:13]
      skip @[FrameSend.scala 52:23]
    else : @[FrameSend.scala 54:37]
      node _T_31 = eq(state, UInt<3>("h02")) @[FrameSend.scala 54:20]
      when _T_31 : @[FrameSend.scala 54:37]
        crcFail <= UInt<1>("h00") @[FrameSend.scala 55:13]
        skip @[FrameSend.scala 54:37]
    when io.resendAsTx : @[FrameSend.scala 57:22]
      resend <= UInt<1>("h01") @[FrameSend.scala 58:12]
      skip @[FrameSend.scala 57:22]
    else : @[FrameSend.scala 59:36]
      node _T_34 = eq(state, UInt<3>("h04")) @[FrameSend.scala 59:20]
      when _T_34 : @[FrameSend.scala 59:36]
        resend <= UInt<1>("h00") @[FrameSend.scala 60:12]
        skip @[FrameSend.scala 59:36]
    when io.sendAsTx : @[FrameSend.scala 62:20]
      send <= UInt<1>("h01") @[FrameSend.scala 63:10]
      skip @[FrameSend.scala 62:20]
    else : @[FrameSend.scala 64:34]
      node _T_37 = eq(state, UInt<3>("h05")) @[FrameSend.scala 64:20]
      when _T_37 : @[FrameSend.scala 64:34]
        send <= UInt<1>("h00") @[FrameSend.scala 65:10]
        skip @[FrameSend.scala 64:34]
    reg requestFrame : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameSend.scala 68:29]
    io.in.ready <= requestFrame @[FrameSend.scala 69:15]
    reg frameBuffer : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameSend.scala 71:28]
    reg counter : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FrameSend.scala 73:24]
    node _T_45 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_45 : @[Conditional.scala 40:58]
      out <= UInt<1>("h00") @[FrameSend.scala 78:11]
      counter <= UInt<1>("h00") @[FrameSend.scala 79:15]
      when crcFail : @[FrameSend.scala 80:20]
        state <= UInt<3>("h02") @[FrameSend.scala 81:15]
        skip @[FrameSend.scala 80:20]
      else : @[FrameSend.scala 82:30]
        when crcPassAsRx : @[FrameSend.scala 82:30]
          state <= UInt<3>("h03") @[FrameSend.scala 83:15]
          skip @[FrameSend.scala 82:30]
        else : @[FrameSend.scala 84:25]
          when resend : @[FrameSend.scala 84:25]
            state <= UInt<3>("h04") @[FrameSend.scala 85:15]
            skip @[FrameSend.scala 84:25]
          else : @[FrameSend.scala 86:23]
            when send : @[FrameSend.scala 86:23]
              state <= UInt<3>("h01") @[FrameSend.scala 87:15]
              skip @[FrameSend.scala 86:23]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_48 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_48 : @[Conditional.scala 39:67]
        requestFrame <= UInt<1>("h01") @[FrameSend.scala 92:20]
        state <= UInt<3>("h05") @[FrameSend.scala 93:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_50 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_50 : @[Conditional.scala 39:67]
          frameBuffer <= resendFrame @[FrameSend.scala 96:19]
          state <= UInt<3>("h06") @[FrameSend.scala 97:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_51 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_51 : @[Conditional.scala 39:67]
            frameBuffer <= nextFrame @[FrameSend.scala 100:19]
            state <= UInt<3>("h06") @[FrameSend.scala 101:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_52 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_52 : @[Conditional.scala 39:67]
              state <= UInt<3>("h06") @[FrameSend.scala 104:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_53 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_53 : @[Conditional.scala 39:67]
                node _T_54 = and(requestFrame, io.in.valid) @[FrameSend.scala 107:25]
                when _T_54 : @[FrameSend.scala 107:40]
                  frameBuffer <= io.in.bits @[FrameSend.scala 108:21]
                  requestFrame <= UInt<1>("h00") @[FrameSend.scala 109:22]
                  state <= UInt<3>("h06") @[FrameSend.scala 110:15]
                  skip @[FrameSend.scala 107:40]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_56 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                when _T_56 : @[Conditional.scala 39:67]
                  node _T_58 = lt(counter, UInt<6>("h024")) @[FrameSend.scala 114:20]
                  when _T_58 : @[FrameSend.scala 114:42]
                    node _T_60 = sub(UInt<6>("h024"), counter) @[FrameSend.scala 115:48]
                    node _T_61 = asUInt(_T_60) @[FrameSend.scala 115:48]
                    node _T_62 = tail(_T_61, 1) @[FrameSend.scala 115:48]
                    node _T_64 = sub(_T_62, UInt<1>("h01")) @[FrameSend.scala 115:58]
                    node _T_65 = asUInt(_T_64) @[FrameSend.scala 115:58]
                    node _T_66 = tail(_T_65, 1) @[FrameSend.scala 115:58]
                    node _T_67 = dshr(frameBuffer, _T_66) @[FrameSend.scala 115:27]
                    node _T_68 = bits(_T_67, 0, 0) @[FrameSend.scala 115:27]
                    out <= _T_68 @[FrameSend.scala 115:13]
                    node _T_70 = add(counter, UInt<1>("h01")) @[FrameSend.scala 116:28]
                    node _T_71 = tail(_T_70, 1) @[FrameSend.scala 116:28]
                    counter <= _T_71 @[FrameSend.scala 116:17]
                    node _T_73 = eq(counter, UInt<6>("h023")) @[FrameSend.scala 117:22]
                    when _T_73 : @[FrameSend.scala 117:50]
                      state <= UInt<3>("h00") @[FrameSend.scala 118:17]
                      skip @[FrameSend.scala 117:50]
                    skip @[FrameSend.scala 114:42]
                  skip @[Conditional.scala 39:67]
    
  module OOKTx_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : UInt<1>, flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>, flip crcPassAsRx : UInt<1>, flip crcFailAsRx : UInt<1>, flip resendAsTx : UInt<1>, flip sendAsTx : UInt<1>}
    
    inst crcEncode of CRCEncode_1 @[OOKTx.scala 35:25]
    crcEncode.clock <= clock
    crcEncode.reset <= reset
    inst frameStackTx of FrameStack_2 @[OOKTx.scala 36:28]
    frameStackTx.clock <= clock
    frameStackTx.reset <= reset
    inst frameSend of FrameSend_1 @[OOKTx.scala 37:25]
    frameSend.clock <= clock
    frameSend.reset <= reset
    io.out <= frameSend.io.out @[OOKTx.scala 40:10]
    crcEncode.io.in.bits <= io.in.bits @[OOKTx.scala 41:19]
    crcEncode.io.in.valid <= io.in.valid @[OOKTx.scala 41:19]
    io.in.ready <= crcEncode.io.in.ready @[OOKTx.scala 41:19]
    crcEncode.io.divisor <= io.divisor @[OOKTx.scala 42:24]
    crcEncode.io.frameBits <= io.frameBits @[OOKTx.scala 43:26]
    crcEncode.io.frameIndex <= io.frameIndex @[OOKTx.scala 44:27]
    frameSend.io.frameBits <= io.frameBits @[OOKTx.scala 45:26]
    frameSend.io.crcPassAsRx <= io.crcPassAsRx @[OOKTx.scala 46:28]
    frameSend.io.crcFailAsRx <= io.crcFailAsRx @[OOKTx.scala 47:28]
    frameSend.io.resendAsTx <= io.resendAsTx @[OOKTx.scala 48:27]
    frameSend.io.sendAsTx <= io.sendAsTx @[OOKTx.scala 49:25]
    frameStackTx.io.in.bits <= crcEncode.io.out.bits @[OOKTx.scala 52:20]
    frameStackTx.io.in.valid <= crcEncode.io.out.valid @[OOKTx.scala 52:20]
    crcEncode.io.out.ready <= frameStackTx.io.in.ready @[OOKTx.scala 52:20]
    frameSend.io.in.bits <= frameStackTx.io.out.bits @[OOKTx.scala 55:23]
    frameSend.io.in.valid <= frameStackTx.io.out.valid @[OOKTx.scala 55:23]
    frameStackTx.io.out.ready <= frameSend.io.in.ready @[OOKTx.scala 55:23]
    
  module FrameSync_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, flip frameBits : UInt<4>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, crcPass : UInt<1>, crcFail : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[FrameSync.scala 34:18]
    node _T_12 = eq(state, UInt<3>("h02")) @[FrameSync.scala 36:29]
    node _T_15 = mux(_T_12, UInt<1>("h01"), UInt<1>("h00")) @[FrameSync.scala 36:22]
    io.out.valid <= _T_15 @[FrameSync.scala 36:16]
    reg wholeFrame : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameSync.scala 38:27]
    io.out.bits <= wholeFrame @[FrameSync.scala 39:15]
    reg bitCounter : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FrameSync.scala 41:27]
    reg frameBitsReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[FrameSync.scala 43:29]
    wire syncOk : UInt<1> @[FrameSync.scala 45:20]
    node _T_23 = eq(frameBitsReg, io.frameBits) @[FrameSync.scala 46:27]
    syncOk <= _T_23 @[FrameSync.scala 46:10]
    node _T_24 = eq(state, UInt<3>("h04")) @[FrameSync.scala 48:27]
    node _T_27 = mux(_T_24, UInt<1>("h01"), UInt<1>("h00")) @[FrameSync.scala 48:20]
    io.crcPass <= _T_27 @[FrameSync.scala 48:14]
    node _T_28 = eq(state, UInt<3>("h03")) @[FrameSync.scala 49:27]
    node _T_31 = mux(_T_28, UInt<1>("h01"), UInt<1>("h00")) @[FrameSync.scala 49:20]
    io.crcFail <= _T_31 @[FrameSync.scala 49:14]
    node resendFrame = cat(io.frameBits, UInt<32>("h00")) @[Cat.scala 30:58]
    node nextFrame = cat(io.frameBits, UInt<32>("h0a")) @[Cat.scala 30:58]
    node _T_32 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_32 : @[Conditional.scala 40:58]
      node _T_34 = eq(syncOk, UInt<1>("h00")) @[FrameSync.scala 57:12]
      when _T_34 : @[FrameSync.scala 57:20]
        node _T_35 = shl(frameBitsReg, 1) @[FrameSync.scala 58:40]
        node _T_36 = or(_T_35, io.in) @[FrameSync.scala 58:46]
        frameBitsReg <= _T_36 @[FrameSync.scala 58:22]
        bitCounter <= UInt<1>("h00") @[FrameSync.scala 59:20]
        skip @[FrameSync.scala 57:20]
      else : @[FrameSync.scala 60:18]
        node _T_39 = add(bitCounter, UInt<1>("h01")) @[FrameSync.scala 61:34]
        node _T_40 = tail(_T_39, 1) @[FrameSync.scala 61:34]
        bitCounter <= _T_40 @[FrameSync.scala 61:20]
        node _T_41 = shl(io.frameBits, 1) @[FrameSync.scala 62:37]
        node _T_42 = or(_T_41, io.in) @[FrameSync.scala 62:43]
        wholeFrame <= _T_42 @[FrameSync.scala 62:20]
        state <= UInt<3>("h01") @[FrameSync.scala 63:15]
        skip @[FrameSync.scala 60:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_43 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_43 : @[Conditional.scala 39:67]
        node _T_45 = lt(bitCounter, UInt<6>("h020")) @[FrameSync.scala 67:23]
        when _T_45 : @[FrameSync.scala 67:64]
          node _T_47 = add(bitCounter, UInt<1>("h01")) @[FrameSync.scala 68:34]
          node _T_48 = tail(_T_47, 1) @[FrameSync.scala 68:34]
          bitCounter <= _T_48 @[FrameSync.scala 68:20]
          node _T_49 = shl(wholeFrame, 1) @[FrameSync.scala 69:35]
          node _T_50 = or(_T_49, io.in) @[FrameSync.scala 69:41]
          wholeFrame <= _T_50 @[FrameSync.scala 69:20]
          skip @[FrameSync.scala 67:64]
        else : @[FrameSync.scala 70:73]
          node _T_52 = geq(bitCounter, UInt<5>("h01f")) @[FrameSync.scala 70:29]
          when _T_52 : @[FrameSync.scala 70:73]
            node _T_54 = add(bitCounter, UInt<1>("h01")) @[FrameSync.scala 71:34]
            node _T_55 = tail(_T_54, 1) @[FrameSync.scala 71:34]
            bitCounter <= _T_55 @[FrameSync.scala 71:20]
            frameBitsReg <= UInt<1>("h00") @[FrameSync.scala 72:22]
            node _T_57 = eq(wholeFrame, nextFrame) @[FrameSync.scala 73:25]
            when _T_57 : @[FrameSync.scala 73:39]
              state <= UInt<3>("h04") @[FrameSync.scala 74:17]
              skip @[FrameSync.scala 73:39]
            else : @[FrameSync.scala 75:47]
              node _T_58 = eq(wholeFrame, resendFrame) @[FrameSync.scala 75:31]
              when _T_58 : @[FrameSync.scala 75:47]
                state <= UInt<3>("h03") @[FrameSync.scala 76:17]
                skip @[FrameSync.scala 75:47]
              else : @[FrameSync.scala 77:72]
                node _T_60 = gt(bitCounter, UInt<6>("h020")) @[FrameSync.scala 77:31]
                when _T_60 : @[FrameSync.scala 77:72]
                  state <= UInt<3>("h02") @[FrameSync.scala 78:17]
                  skip @[FrameSync.scala 77:72]
            skip @[FrameSync.scala 70:73]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_61 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_61 : @[Conditional.scala 39:67]
          when io.out.ready : @[FrameSync.scala 83:25]
            bitCounter <= UInt<1>("h00") @[FrameSync.scala 84:20]
            wholeFrame <= UInt<1>("h00") @[FrameSync.scala 85:20]
            state <= UInt<3>("h00") @[FrameSync.scala 86:15]
            skip @[FrameSync.scala 83:25]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_64 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_64 : @[Conditional.scala 39:67]
            bitCounter <= UInt<1>("h00") @[FrameSync.scala 90:18]
            wholeFrame <= UInt<1>("h00") @[FrameSync.scala 91:18]
            state <= UInt<3>("h00") @[FrameSync.scala 92:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_67 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_67 : @[Conditional.scala 39:67]
              bitCounter <= UInt<1>("h00") @[FrameSync.scala 95:18]
              wholeFrame <= UInt<1>("h00") @[FrameSync.scala 96:18]
              state <= UInt<3>("h00") @[FrameSync.scala 97:13]
              skip @[Conditional.scala 39:67]
    
  module FrameStack_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}}
    
    smem stack : UInt<36>[2] @[FrameStack.scala 29:26]
    reg readAddr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 30:25]
    reg writeAddr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 31:26]
    reg stackUsed : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[FrameStack.scala 32:26]
    reg frameOut : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[FrameStack.scala 34:25]
    wire _T_25 : UInt @[FrameStack.scala 35:25]
    _T_25 is invalid @[FrameStack.scala 35:25]
    when UInt<1>("h01") : @[FrameStack.scala 35:25]
      _T_25 <= readAddr @[FrameStack.scala 35:25]
      node _T_27 = or(_T_25, UInt<1>("h00")) @[FrameStack.scala 35:25]
      node _T_28 = bits(_T_27, 0, 0) @[FrameStack.scala 35:25]
      read mport _T_29 = stack[_T_28], clock @[FrameStack.scala 35:25]
      skip @[FrameStack.scala 35:25]
    frameOut <= _T_29 @[FrameStack.scala 35:12]
    io.out.bits <= frameOut @[FrameStack.scala 36:15]
    reg frameValidOut : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FrameStack.scala 37:30]
    io.out.valid <= frameValidOut @[FrameStack.scala 38:16]
    node _T_33 = eq(stackUsed, UInt<2>("h02")) @[FrameStack.scala 40:30]
    node _T_35 = eq(_T_33, UInt<1>("h00")) @[FrameStack.scala 40:18]
    io.in.ready <= _T_35 @[FrameStack.scala 40:15]
    node _T_36 = and(io.in.ready, io.in.valid) @[FrameStack.scala 42:20]
    when _T_36 : @[FrameStack.scala 42:35]
      write mport _T_37 = stack[writeAddr], clock
      _T_37 <= io.in.bits
      node _T_39 = add(stackUsed, UInt<1>("h01")) @[FrameStack.scala 44:28]
      node _T_40 = tail(_T_39, 1) @[FrameStack.scala 44:28]
      stackUsed <= _T_40 @[FrameStack.scala 44:15]
      frameValidOut <= UInt<1>("h00") @[FrameStack.scala 45:19]
      node _T_43 = eq(writeAddr, UInt<1>("h01")) @[FrameStack.scala 46:32]
      node _T_46 = add(writeAddr, UInt<1>("h01")) @[FrameStack.scala 46:73]
      node _T_47 = tail(_T_46, 1) @[FrameStack.scala 46:73]
      node _T_48 = mux(_T_43, UInt<1>("h00"), _T_47) @[FrameStack.scala 46:21]
      writeAddr <= _T_48 @[FrameStack.scala 46:15]
      skip @[FrameStack.scala 42:35]
    else : @[FrameStack.scala 47:64]
      node _T_50 = eq(frameValidOut, UInt<1>("h00")) @[FrameStack.scala 47:30]
      node _T_51 = and(io.out.ready, _T_50) @[FrameStack.scala 47:27]
      node _T_53 = gt(stackUsed, UInt<1>("h00")) @[FrameStack.scala 47:58]
      node _T_54 = and(_T_51, _T_53) @[FrameStack.scala 47:45]
      when _T_54 : @[FrameStack.scala 47:64]
        node _T_56 = sub(stackUsed, UInt<1>("h01")) @[FrameStack.scala 49:28]
        node _T_57 = asUInt(_T_56) @[FrameStack.scala 49:28]
        node _T_58 = tail(_T_57, 1) @[FrameStack.scala 49:28]
        stackUsed <= _T_58 @[FrameStack.scala 49:15]
        frameValidOut <= UInt<1>("h01") @[FrameStack.scala 50:19]
        node _T_61 = eq(readAddr, UInt<1>("h01")) @[FrameStack.scala 51:30]
        node _T_64 = add(readAddr, UInt<1>("h01")) @[FrameStack.scala 51:70]
        node _T_65 = tail(_T_64, 1) @[FrameStack.scala 51:70]
        node _T_66 = mux(_T_61, UInt<1>("h00"), _T_65) @[FrameStack.scala 51:20]
        readAddr <= _T_66 @[FrameStack.scala 51:14]
        skip @[FrameStack.scala 47:64]
      else : @[FrameStack.scala 52:14]
        frameValidOut <= UInt<1>("h00") @[FrameStack.scala 53:19]
        skip @[FrameStack.scala 52:14]
    
  module CRCCheck_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<36>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, flip divisor : UInt<9>, dataOutIndex : UInt<8>, crcPass : UInt<1>}
    
    reg dataOutValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCCheck.scala 31:29]
    io.out.valid <= dataOutValid @[CRCCheck.scala 32:16]
    reg crcPass : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCCheck.scala 34:24]
    io.crcPass <= crcPass @[CRCCheck.scala 35:14]
    reg requestFrame : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CRCCheck.scala 37:29]
    io.in.ready <= requestFrame @[CRCCheck.scala 38:15]
    reg frameIndex : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[CRCCheck.scala 40:27]
    reg frameIn : UInt<36>, clock with : (reset => (reset, UInt<36>("h00"))) @[CRCCheck.scala 42:24]
    node _T_25 = bits(frameIn, 23, 8) @[CRCCheck.scala 43:25]
    io.out.bits <= _T_25 @[CRCCheck.scala 43:15]
    node _T_26 = bits(frameIn, 31, 24) @[CRCCheck.scala 44:29]
    io.dataOutIndex <= _T_26 @[CRCCheck.scala 44:19]
    reg dataCal : UInt<24>, clock with : (reset => (reset, UInt<24>("h00"))) @[CRCCheck.scala 46:24]
    reg counter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[CRCCheck.scala 48:24]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CRCCheck.scala 52:18]
    node _T_32 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_32 : @[Conditional.scala 40:58]
      dataOutValid <= UInt<1>("h00") @[CRCCheck.scala 58:20]
      requestFrame <= UInt<1>("h01") @[CRCCheck.scala 59:20]
      when io.in.valid : @[CRCCheck.scala 60:24]
        requestFrame <= UInt<1>("h00") @[CRCCheck.scala 61:22]
        frameIn <= io.in.bits @[CRCCheck.scala 62:17]
        node _T_36 = bits(io.in.bits, 23, 0) @[CRCCheck.scala 63:30]
        dataCal <= _T_36 @[CRCCheck.scala 63:17]
        node _T_37 = bits(io.in.bits, 31, 24) @[CRCCheck.scala 64:33]
        frameIndex <= _T_37 @[CRCCheck.scala 64:20]
        counter <= UInt<1>("h00") @[CRCCheck.scala 65:17]
        state <= UInt<2>("h01") @[CRCCheck.scala 66:15]
        skip @[CRCCheck.scala 60:24]
      else : @[CRCCheck.scala 67:18]
        requestFrame <= UInt<1>("h01") @[CRCCheck.scala 68:22]
        skip @[CRCCheck.scala 67:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_40 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_40 : @[Conditional.scala 39:67]
        node _T_42 = eq(dataCal, UInt<1>("h00")) @[CRCCheck.scala 73:21]
        node _T_43 = eq(dataCal, io.divisor) @[CRCCheck.scala 73:39]
        node _T_44 = or(_T_42, _T_43) @[CRCCheck.scala 73:29]
        when _T_44 : @[CRCCheck.scala 73:55]
          crcPass <= UInt<1>("h01") @[CRCCheck.scala 74:17]
          state <= UInt<2>("h02") @[CRCCheck.scala 75:15]
          skip @[CRCCheck.scala 73:55]
        else : @[CRCCheck.scala 76:39]
          node _T_46 = lt(dataCal, io.divisor) @[CRCCheck.scala 76:26]
          when _T_46 : @[CRCCheck.scala 76:39]
            crcPass <= UInt<1>("h00") @[CRCCheck.scala 77:17]
            state <= UInt<2>("h02") @[CRCCheck.scala 78:15]
            skip @[CRCCheck.scala 76:39]
          else : @[CRCCheck.scala 79:18]
            node _T_49 = add(counter, UInt<1>("h01")) @[CRCCheck.scala 80:28]
            node _T_50 = tail(_T_49, 1) @[CRCCheck.scala 80:28]
            counter <= _T_50 @[CRCCheck.scala 80:17]
            node _T_53 = sub(UInt<5>("h018"), UInt<1>("h01")) @[CRCCheck.scala 81:59]
            node _T_54 = asUInt(_T_53) @[CRCCheck.scala 81:59]
            node _T_55 = tail(_T_54, 1) @[CRCCheck.scala 81:59]
            node _T_56 = sub(_T_55, counter) @[CRCCheck.scala 81:63]
            node _T_57 = asUInt(_T_56) @[CRCCheck.scala 81:63]
            node _T_58 = tail(_T_57, 1) @[CRCCheck.scala 81:63]
            node _T_59 = dshr(dataCal, _T_58) @[CRCCheck.scala 81:21]
            node _T_60 = bits(_T_59, 0, 0) @[CRCCheck.scala 81:21]
            node _T_62 = eq(_T_60, UInt<1>("h01")) @[CRCCheck.scala 81:73]
            when _T_62 : @[CRCCheck.scala 81:81]
              node _T_64 = eq(counter, UInt<1>("h00")) @[CRCCheck.scala 82:24]
              when _T_64 : @[CRCCheck.scala 82:32]
                node _T_65 = bits(dataCal, 23, 15) @[CRCCheck.scala 83:36]
                node _T_66 = xor(_T_65, io.divisor) @[CRCCheck.scala 83:83]
                node _T_67 = bits(dataCal, 14, 0) @[CRCCheck.scala 83:104]
                node _T_68 = cat(_T_66, _T_67) @[Cat.scala 30:58]
                dataCal <= _T_68 @[CRCCheck.scala 83:21]
                skip @[CRCCheck.scala 82:32]
              else : @[CRCCheck.scala 84:22]
                node _T_71 = sub(counter, UInt<1>("h01")) @[CRCCheck.scala 85:56]
                node _T_72 = asUInt(_T_71) @[CRCCheck.scala 85:56]
                node _T_73 = tail(_T_72, 1) @[CRCCheck.scala 85:56]
                node _T_74 = dshl(UInt<1>("h00"), _T_73) @[CRCCheck.scala 85:45]
                node _T_75 = dshl(dataCal, counter) @[CRCCheck.scala 86:34]
                node _T_76 = bits(_T_75, 23, 0) @[CRCCheck.scala 86:44]
                node _T_77 = shr(_T_76, 15) @[CRCCheck.scala 86:76]
                node _T_78 = xor(_T_77, io.divisor) @[CRCCheck.scala 86:95]
                node _T_80 = add(UInt<4>("h09"), counter) @[CRCCheck.scala 87:58]
                node _T_81 = tail(_T_80, 1) @[CRCCheck.scala 87:58]
                node _T_82 = dshl(dataCal, _T_81) @[CRCCheck.scala 87:38]
                node _T_83 = bits(_T_82, 23, 0) @[CRCCheck.scala 87:68]
                node _T_85 = add(UInt<4>("h09"), counter) @[CRCCheck.scala 87:121]
                node _T_86 = tail(_T_85, 1) @[CRCCheck.scala 87:121]
                node _T_87 = dshr(_T_83, _T_86) @[CRCCheck.scala 87:102]
                node _T_88 = cat(_T_74, _T_78) @[Cat.scala 30:58]
                node _T_91 = sub(UInt<5>("h018"), UInt<4>("h09")) @[CRCCheck.scala 88:84]
                node _T_92 = asUInt(_T_91) @[CRCCheck.scala 88:84]
                node _T_93 = tail(_T_92, 1) @[CRCCheck.scala 88:84]
                node _T_94 = sub(_T_93, counter) @[CRCCheck.scala 88:106]
                node _T_95 = asUInt(_T_94) @[CRCCheck.scala 88:106]
                node _T_96 = tail(_T_95, 1) @[CRCCheck.scala 88:106]
                node _T_97 = dshl(_T_88, _T_96) @[CRCCheck.scala 88:44]
                node _T_98 = or(_T_97, _T_87) @[CRCCheck.scala 88:116]
                dataCal <= _T_98 @[CRCCheck.scala 88:21]
                skip @[CRCCheck.scala 84:22]
              skip @[CRCCheck.scala 81:81]
            skip @[CRCCheck.scala 79:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_99 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_99 : @[Conditional.scala 39:67]
          node _T_101 = eq(dataOutValid, UInt<1>("h00")) @[CRCCheck.scala 95:28]
          node _T_102 = and(io.out.ready, _T_101) @[CRCCheck.scala 95:25]
          when _T_102 : @[CRCCheck.scala 95:42]
            dataOutValid <= UInt<1>("h01") @[CRCCheck.scala 96:22]
            state <= UInt<2>("h00") @[CRCCheck.scala 97:15]
            skip @[CRCCheck.scala 95:42]
          skip @[Conditional.scala 39:67]
    
  module OOKRx_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, flip frameBits : UInt<4>, flip divisor : UInt<9>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, dataOutIndex : UInt<8>, crcPass : UInt<1>, crcPassAsTx : UInt<1>, crcFailAsTx : UInt<1>}
    
    inst frameSync of FrameSync_1 @[OOKRx.scala 34:25]
    frameSync.clock <= clock
    frameSync.reset <= reset
    inst frameStackRx of FrameStack_3 @[OOKRx.scala 35:28]
    frameStackRx.clock <= clock
    frameStackRx.reset <= reset
    inst crcCheck of CRCCheck_1 @[OOKRx.scala 36:24]
    crcCheck.clock <= clock
    crcCheck.reset <= reset
    frameSync.io.in <= io.in @[OOKRx.scala 39:19]
    frameSync.io.frameBits <= io.frameBits @[OOKRx.scala 40:26]
    crcCheck.io.divisor <= io.divisor @[OOKRx.scala 41:23]
    io.out.bits <= crcCheck.io.out.bits @[OOKRx.scala 42:10]
    io.out.valid <= crcCheck.io.out.valid @[OOKRx.scala 42:10]
    crcCheck.io.out.ready <= io.out.ready @[OOKRx.scala 42:10]
    io.dataOutIndex <= crcCheck.io.dataOutIndex @[OOKRx.scala 43:19]
    io.crcPass <= crcCheck.io.crcPass @[OOKRx.scala 44:14]
    io.crcPassAsTx <= frameSync.io.crcPass @[OOKRx.scala 45:18]
    io.crcFailAsTx <= frameSync.io.crcFail @[OOKRx.scala 46:18]
    frameStackRx.io.in.bits <= frameSync.io.out.bits @[OOKRx.scala 49:20]
    frameStackRx.io.in.valid <= frameSync.io.out.valid @[OOKRx.scala 49:20]
    frameSync.io.out.ready <= frameStackRx.io.in.ready @[OOKRx.scala 49:20]
    crcCheck.io.in.bits <= frameStackRx.io.out.bits @[OOKRx.scala 52:23]
    crcCheck.io.in.valid <= frameStackRx.io.out.valid @[OOKRx.scala 52:23]
    frameStackRx.io.out.ready <= crcCheck.io.in.ready @[OOKRx.scala 52:23]
    
  module DataMemory_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    smem mem : UInt<16>[100] @[DataMemory.scala 37:24]
    reg memUsage : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 42:25]
    reg writeAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 43:26]
    reg readAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 44:25]
    node _T_19 = eq(memUsage, UInt<1>("h00")) @[DataMemory.scala 46:32]
    node _T_22 = mux(_T_19, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 46:22]
    io.out.valid <= _T_22 @[DataMemory.scala 46:16]
    wire _T_25 : UInt @[DataMemory.scala 47:26]
    _T_25 is invalid @[DataMemory.scala 47:26]
    when UInt<1>("h01") : @[DataMemory.scala 47:26]
      _T_25 <= readAddr @[DataMemory.scala 47:26]
      node _T_27 = or(_T_25, UInt<7>("h00")) @[DataMemory.scala 47:26]
      node _T_28 = bits(_T_27, 6, 0) @[DataMemory.scala 47:26]
      read mport _T_29 = mem[_T_28], clock @[DataMemory.scala 47:26]
      skip @[DataMemory.scala 47:26]
    io.out.bits <= _T_29 @[DataMemory.scala 47:15]
    node _T_31 = eq(memUsage, UInt<7>("h064")) @[DataMemory.scala 48:31]
    node _T_34 = mux(_T_31, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 48:21]
    io.in.ready <= _T_34 @[DataMemory.scala 48:15]
    when io.in.ready : @[DataMemory.scala 50:20]
      when io.in.valid : @[DataMemory.scala 51:22]
        write mport _T_35 = mem[writeAddr], clock
        _T_35 <= io.in.bits
        node _T_37 = eq(writeAddr, UInt<7>("h063")) @[DataMemory.scala 53:34]
        node _T_40 = add(writeAddr, UInt<1>("h01")) @[DataMemory.scala 53:71]
        node _T_41 = tail(_T_40, 1) @[DataMemory.scala 53:71]
        node _T_42 = mux(_T_37, UInt<1>("h00"), _T_41) @[DataMemory.scala 53:23]
        writeAddr <= _T_42 @[DataMemory.scala 53:17]
        node _T_44 = add(memUsage, UInt<1>("h01")) @[DataMemory.scala 54:28]
        node _T_45 = tail(_T_44, 1) @[DataMemory.scala 54:28]
        memUsage <= _T_45 @[DataMemory.scala 54:16]
        skip @[DataMemory.scala 51:22]
      else : @[DataMemory.scala 55:45]
        node _T_46 = and(io.out.valid, io.out.ready) @[DataMemory.scala 55:29]
        when _T_46 : @[DataMemory.scala 55:45]
          node _T_48 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 56:32]
          node _T_51 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 56:68]
          node _T_52 = tail(_T_51, 1) @[DataMemory.scala 56:68]
          node _T_53 = mux(_T_48, UInt<1>("h00"), _T_52) @[DataMemory.scala 56:22]
          readAddr <= _T_53 @[DataMemory.scala 56:16]
          node _T_55 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 57:28]
          node _T_56 = asUInt(_T_55) @[DataMemory.scala 57:28]
          node _T_57 = tail(_T_56, 1) @[DataMemory.scala 57:28]
          memUsage <= _T_57 @[DataMemory.scala 57:16]
          skip @[DataMemory.scala 55:45]
      skip @[DataMemory.scala 50:20]
    else : @[DataMemory.scala 59:14]
      when io.out.ready : @[DataMemory.scala 60:23]
        node _T_59 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 61:32]
        node _T_62 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 61:68]
        node _T_63 = tail(_T_62, 1) @[DataMemory.scala 61:68]
        node _T_64 = mux(_T_59, UInt<1>("h00"), _T_63) @[DataMemory.scala 61:22]
        readAddr <= _T_64 @[DataMemory.scala 61:16]
        node _T_66 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 62:28]
        node _T_67 = asUInt(_T_66) @[DataMemory.scala 62:28]
        node _T_68 = tail(_T_67, 1) @[DataMemory.scala 62:28]
        memUsage <= _T_68 @[DataMemory.scala 62:16]
        skip @[DataMemory.scala 60:23]
      skip @[DataMemory.scala 59:14]
    
  module DataMemory_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    smem mem : UInt<16>[100] @[DataMemory.scala 37:24]
    reg memUsage : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 42:25]
    reg writeAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 43:26]
    reg readAddr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[DataMemory.scala 44:25]
    node _T_19 = eq(memUsage, UInt<1>("h00")) @[DataMemory.scala 46:32]
    node _T_22 = mux(_T_19, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 46:22]
    io.out.valid <= _T_22 @[DataMemory.scala 46:16]
    wire _T_25 : UInt @[DataMemory.scala 47:26]
    _T_25 is invalid @[DataMemory.scala 47:26]
    when UInt<1>("h01") : @[DataMemory.scala 47:26]
      _T_25 <= readAddr @[DataMemory.scala 47:26]
      node _T_27 = or(_T_25, UInt<7>("h00")) @[DataMemory.scala 47:26]
      node _T_28 = bits(_T_27, 6, 0) @[DataMemory.scala 47:26]
      read mport _T_29 = mem[_T_28], clock @[DataMemory.scala 47:26]
      skip @[DataMemory.scala 47:26]
    io.out.bits <= _T_29 @[DataMemory.scala 47:15]
    node _T_31 = eq(memUsage, UInt<7>("h064")) @[DataMemory.scala 48:31]
    node _T_34 = mux(_T_31, UInt<1>("h00"), UInt<1>("h01")) @[DataMemory.scala 48:21]
    io.in.ready <= _T_34 @[DataMemory.scala 48:15]
    when io.in.ready : @[DataMemory.scala 50:20]
      when io.in.valid : @[DataMemory.scala 51:22]
        write mport _T_35 = mem[writeAddr], clock
        _T_35 <= io.in.bits
        node _T_37 = eq(writeAddr, UInt<7>("h063")) @[DataMemory.scala 53:34]
        node _T_40 = add(writeAddr, UInt<1>("h01")) @[DataMemory.scala 53:71]
        node _T_41 = tail(_T_40, 1) @[DataMemory.scala 53:71]
        node _T_42 = mux(_T_37, UInt<1>("h00"), _T_41) @[DataMemory.scala 53:23]
        writeAddr <= _T_42 @[DataMemory.scala 53:17]
        node _T_44 = add(memUsage, UInt<1>("h01")) @[DataMemory.scala 54:28]
        node _T_45 = tail(_T_44, 1) @[DataMemory.scala 54:28]
        memUsage <= _T_45 @[DataMemory.scala 54:16]
        skip @[DataMemory.scala 51:22]
      else : @[DataMemory.scala 55:45]
        node _T_46 = and(io.out.valid, io.out.ready) @[DataMemory.scala 55:29]
        when _T_46 : @[DataMemory.scala 55:45]
          node _T_48 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 56:32]
          node _T_51 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 56:68]
          node _T_52 = tail(_T_51, 1) @[DataMemory.scala 56:68]
          node _T_53 = mux(_T_48, UInt<1>("h00"), _T_52) @[DataMemory.scala 56:22]
          readAddr <= _T_53 @[DataMemory.scala 56:16]
          node _T_55 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 57:28]
          node _T_56 = asUInt(_T_55) @[DataMemory.scala 57:28]
          node _T_57 = tail(_T_56, 1) @[DataMemory.scala 57:28]
          memUsage <= _T_57 @[DataMemory.scala 57:16]
          skip @[DataMemory.scala 55:45]
      skip @[DataMemory.scala 50:20]
    else : @[DataMemory.scala 59:14]
      when io.out.ready : @[DataMemory.scala 60:23]
        node _T_59 = eq(readAddr, UInt<7>("h063")) @[DataMemory.scala 61:32]
        node _T_62 = add(readAddr, UInt<1>("h01")) @[DataMemory.scala 61:68]
        node _T_63 = tail(_T_62, 1) @[DataMemory.scala 61:68]
        node _T_64 = mux(_T_59, UInt<1>("h00"), _T_63) @[DataMemory.scala 61:22]
        readAddr <= _T_64 @[DataMemory.scala 61:16]
        node _T_66 = sub(memUsage, UInt<1>("h01")) @[DataMemory.scala 62:28]
        node _T_67 = asUInt(_T_66) @[DataMemory.scala 62:28]
        node _T_68 = tail(_T_67, 1) @[DataMemory.scala 62:28]
        memUsage <= _T_68 @[DataMemory.scala 62:16]
        skip @[DataMemory.scala 60:23]
      skip @[DataMemory.scala 59:14]
    
  module TopControl_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>, bitTx : UInt<1>, flip bitRx : UInt<1>, flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[TopControl.scala 40:18]
    inst ooktx of OOKTx_1 @[TopControl.scala 43:21]
    ooktx.clock <= clock
    ooktx.reset <= reset
    inst ookrx of OOKRx_1 @[TopControl.scala 44:21]
    ookrx.clock <= clock
    ookrx.reset <= reset
    inst txMemory of DataMemory_2 @[TopControl.scala 47:24]
    txMemory.clock <= clock
    txMemory.reset <= reset
    inst rxMemory of DataMemory_3 @[TopControl.scala 48:24]
    rxMemory.clock <= clock
    rxMemory.reset <= reset
    reg counter : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[TopControl.scala 51:24]
    node _T_21 = eq(state, UInt<4>("h07")) @[TopControl.scala 53:14]
    node _T_22 = eq(state, UInt<4>("h08")) @[TopControl.scala 53:40]
    node _T_23 = or(_T_21, _T_22) @[TopControl.scala 53:31]
    when _T_23 : @[TopControl.scala 53:57]
      counter <= UInt<1>("h00") @[TopControl.scala 54:13]
      skip @[TopControl.scala 53:57]
    else : @[TopControl.scala 55:14]
      node _T_26 = add(counter, UInt<1>("h01")) @[TopControl.scala 56:24]
      node _T_27 = tail(_T_26, 1) @[TopControl.scala 56:24]
      counter <= _T_27 @[TopControl.scala 56:13]
      skip @[TopControl.scala 55:14]
    reg firstTx : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[TopControl.scala 59:24]
    node _T_30 = eq(state, UInt<4>("h07")) @[TopControl.scala 60:14]
    node _T_31 = eq(state, UInt<4>("h08")) @[TopControl.scala 60:40]
    node _T_32 = or(_T_30, _T_31) @[TopControl.scala 60:31]
    when _T_32 : @[TopControl.scala 60:57]
      firstTx <= UInt<1>("h00") @[TopControl.scala 61:13]
      skip @[TopControl.scala 60:57]
    else : @[TopControl.scala 62:37]
      node _T_35 = eq(txMemory.io.out.valid, UInt<1>("h00")) @[TopControl.scala 62:14]
      when _T_35 : @[TopControl.scala 62:37]
        firstTx <= UInt<1>("h01") @[TopControl.scala 63:13]
        skip @[TopControl.scala 62:37]
    reg txMode : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TopControl.scala 66:23]
    when txMemory.io.out.valid : @[TopControl.scala 67:30]
      txMode <= UInt<1>("h01") @[TopControl.scala 68:12]
      skip @[TopControl.scala 67:30]
    else : @[TopControl.scala 69:33]
      when ookrx.io.out.valid : @[TopControl.scala 69:33]
        txMode <= UInt<1>("h00") @[TopControl.scala 70:12]
        skip @[TopControl.scala 69:33]
    ooktx.io.frameBits <= io.frameBits @[TopControl.scala 74:22]
    ooktx.io.frameIndex <= io.frameIndex @[TopControl.scala 75:23]
    ooktx.io.divisor <= io.divisor @[TopControl.scala 76:20]
    io.bitTx <= ooktx.io.out @[TopControl.scala 77:12]
    ookrx.io.frameBits <= io.frameBits @[TopControl.scala 80:22]
    ookrx.io.divisor <= io.divisor @[TopControl.scala 81:20]
    ookrx.io.in <= io.bitRx @[TopControl.scala 82:15]
    reg loadDataBuffer : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[TopControl.scala 85:31]
    node _T_43 = eq(state, UInt<4>("h00")) @[TopControl.scala 88:35]
    node _T_46 = mux(_T_43, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 88:28]
    ookrx.io.out.ready <= _T_46 @[TopControl.scala 88:22]
    rxMemory.io.in.bits <= ookrx.io.out.bits @[TopControl.scala 91:23]
    node _T_47 = eq(state, UInt<4>("h01")) @[TopControl.scala 92:37]
    node _T_50 = mux(_T_47, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 92:30]
    rxMemory.io.in.valid <= _T_50 @[TopControl.scala 92:24]
    io.out.bits <= rxMemory.io.out.bits @[TopControl.scala 95:15]
    node _T_51 = eq(state, UInt<4>("h02")) @[TopControl.scala 96:29]
    node _T_54 = mux(_T_51, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 96:22]
    io.out.valid <= _T_54 @[TopControl.scala 96:16]
    node _T_55 = eq(state, UInt<4>("h02")) @[TopControl.scala 97:38]
    node _T_58 = mux(_T_55, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 97:31]
    rxMemory.io.out.ready <= _T_58 @[TopControl.scala 97:25]
    ooktx.io.in.bits <= txMemory.io.out.bits @[TopControl.scala 100:20]
    node _T_59 = eq(state, UInt<4>("h03")) @[TopControl.scala 101:34]
    node _T_62 = mux(_T_59, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 101:27]
    ooktx.io.in.valid <= _T_62 @[TopControl.scala 101:21]
    node _T_63 = eq(state, UInt<4>("h03")) @[TopControl.scala 102:38]
    node _T_66 = mux(_T_63, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 102:31]
    txMemory.io.out.ready <= _T_66 @[TopControl.scala 102:25]
    txMemory.io.in.bits <= loadDataBuffer @[TopControl.scala 105:23]
    node _T_67 = eq(state, UInt<4>("h04")) @[TopControl.scala 106:37]
    node _T_70 = mux(_T_67, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 106:30]
    txMemory.io.in.valid <= _T_70 @[TopControl.scala 106:24]
    node _T_71 = eq(state, UInt<4>("h04")) @[TopControl.scala 107:28]
    node _T_74 = mux(_T_71, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 107:21]
    io.in.ready <= _T_74 @[TopControl.scala 107:15]
    node _T_75 = eq(state, UInt<4>("h05")) @[TopControl.scala 110:37]
    node _T_78 = mux(_T_75, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 110:30]
    ooktx.io.crcPassAsRx <= _T_78 @[TopControl.scala 110:24]
    node _T_79 = eq(state, UInt<4>("h06")) @[TopControl.scala 111:37]
    node _T_82 = mux(_T_79, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 111:30]
    ooktx.io.crcFailAsRx <= _T_82 @[TopControl.scala 111:24]
    node _T_83 = eq(state, UInt<4>("h08")) @[TopControl.scala 114:36]
    node _T_86 = mux(_T_83, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 114:29]
    ooktx.io.resendAsTx <= _T_86 @[TopControl.scala 114:23]
    node _T_87 = eq(state, UInt<4>("h07")) @[TopControl.scala 115:34]
    node _T_90 = mux(_T_87, UInt<1>("h01"), UInt<1>("h00")) @[TopControl.scala 115:27]
    ooktx.io.sendAsTx <= _T_90 @[TopControl.scala 115:21]
    reg crcPassAsTx : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TopControl.scala 118:28]
    reg crcFailAsTx : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TopControl.scala 119:28]
    node _T_95 = eq(counter, UInt<10>("h03e8")) @[TopControl.scala 121:41]
    node _T_96 = and(_T_95, firstTx) @[TopControl.scala 121:56]
    node _T_97 = or(ookrx.io.crcPassAsTx, _T_96) @[TopControl.scala 121:29]
    when _T_97 : @[TopControl.scala 121:68]
      crcPassAsTx <= UInt<1>("h01") @[TopControl.scala 122:17]
      skip @[TopControl.scala 121:68]
    else : @[TopControl.scala 123:37]
      node _T_99 = eq(state, UInt<4>("h07")) @[TopControl.scala 123:20]
      when _T_99 : @[TopControl.scala 123:37]
        crcPassAsTx <= UInt<1>("h00") @[TopControl.scala 124:17]
        skip @[TopControl.scala 123:37]
    node _T_101 = eq(counter, UInt<10>("h03e8")) @[TopControl.scala 126:41]
    node _T_103 = eq(firstTx, UInt<1>("h00")) @[TopControl.scala 126:59]
    node _T_104 = and(_T_101, _T_103) @[TopControl.scala 126:56]
    node _T_105 = or(ookrx.io.crcFailAsTx, _T_104) @[TopControl.scala 126:29]
    when _T_105 : @[TopControl.scala 126:69]
      crcFailAsTx <= UInt<1>("h01") @[TopControl.scala 127:17]
      skip @[TopControl.scala 126:69]
    else : @[TopControl.scala 128:37]
      node _T_107 = eq(state, UInt<4>("h08")) @[TopControl.scala 128:20]
      when _T_107 : @[TopControl.scala 128:37]
        crcFailAsTx <= UInt<1>("h00") @[TopControl.scala 129:17]
        skip @[TopControl.scala 128:37]
    node _T_109 = eq(UInt<4>("h00"), state) @[Conditional.scala 37:30]
    when _T_109 : @[Conditional.scala 40:58]
      node _T_110 = and(crcPassAsTx, txMode) @[TopControl.scala 141:24]
      when _T_110 : @[TopControl.scala 141:34]
        state <= UInt<4>("h07") @[TopControl.scala 142:15]
        skip @[TopControl.scala 141:34]
      else : @[TopControl.scala 143:40]
        node _T_111 = and(crcFailAsTx, txMode) @[TopControl.scala 143:30]
        when _T_111 : @[TopControl.scala 143:40]
          state <= UInt<4>("h08") @[TopControl.scala 144:15]
          skip @[TopControl.scala 143:40]
        else : @[TopControl.scala 145:48]
          node _T_113 = eq(txMode, UInt<1>("h00")) @[TopControl.scala 145:40]
          node _T_114 = and(ookrx.io.out.valid, _T_113) @[TopControl.scala 145:37]
          when _T_114 : @[TopControl.scala 145:48]
            when ookrx.io.crcPass : @[TopControl.scala 146:31]
              state <= UInt<4>("h05") @[TopControl.scala 147:17]
              skip @[TopControl.scala 146:31]
            else : @[TopControl.scala 148:20]
              state <= UInt<4>("h06") @[TopControl.scala 149:17]
              skip @[TopControl.scala 148:20]
            skip @[TopControl.scala 145:48]
          else : @[TopControl.scala 151:56]
            node _T_115 = and(io.out.ready, rxMemory.io.out.valid) @[TopControl.scala 151:31]
            when _T_115 : @[TopControl.scala 151:56]
              state <= UInt<4>("h02") @[TopControl.scala 152:15]
              skip @[TopControl.scala 151:56]
            else : @[TopControl.scala 153:61]
              node _T_116 = and(ooktx.io.in.ready, txMemory.io.out.valid) @[TopControl.scala 153:36]
              when _T_116 : @[TopControl.scala 153:61]
                state <= UInt<4>("h03") @[TopControl.scala 154:15]
                skip @[TopControl.scala 153:61]
              else : @[TopControl.scala 155:54]
                node _T_117 = and(io.in.valid, txMemory.io.in.ready) @[TopControl.scala 155:30]
                when _T_117 : @[TopControl.scala 155:54]
                  loadDataBuffer <= io.in.bits @[TopControl.scala 156:24]
                  state <= UInt<4>("h04") @[TopControl.scala 157:15]
                  skip @[TopControl.scala 155:54]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_118 = eq(UInt<4>("h01"), state) @[Conditional.scala 37:30]
      when _T_118 : @[Conditional.scala 39:67]
        state <= UInt<4>("h00") @[TopControl.scala 161:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_119 = eq(UInt<4>("h02"), state) @[Conditional.scala 37:30]
        when _T_119 : @[Conditional.scala 39:67]
          state <= UInt<4>("h00") @[TopControl.scala 164:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_120 = eq(UInt<4>("h03"), state) @[Conditional.scala 37:30]
          when _T_120 : @[Conditional.scala 39:67]
            state <= UInt<4>("h00") @[TopControl.scala 167:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_121 = eq(UInt<4>("h04"), state) @[Conditional.scala 37:30]
            when _T_121 : @[Conditional.scala 39:67]
              state <= UInt<4>("h00") @[TopControl.scala 170:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_122 = eq(UInt<4>("h05"), state) @[Conditional.scala 37:30]
              when _T_122 : @[Conditional.scala 39:67]
                state <= UInt<4>("h01") @[TopControl.scala 173:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_123 = eq(UInt<4>("h06"), state) @[Conditional.scala 37:30]
                when _T_123 : @[Conditional.scala 39:67]
                  state <= UInt<4>("h00") @[TopControl.scala 176:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_124 = eq(UInt<4>("h07"), state) @[Conditional.scala 37:30]
                  when _T_124 : @[Conditional.scala 39:67]
                    state <= UInt<4>("h00") @[TopControl.scala 179:13]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_125 = eq(UInt<4>("h08"), state) @[Conditional.scala 37:30]
                    when _T_125 : @[Conditional.scala 39:67]
                      state <= UInt<4>("h00") @[TopControl.scala 182:13]
                      skip @[Conditional.scala 39:67]
    
  module TopSimulator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip txin : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, txout : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, flip rxin : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, rxout : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, flip frameBits : UInt<4>, flip frameIndex : UInt<8>, flip divisor : UInt<9>, flip error : UInt<1>}
    
    inst tx of TopControl @[TopSimulator.scala 36:18]
    tx.clock <= clock
    tx.reset <= reset
    inst rx of TopControl_1 @[TopSimulator.scala 37:18]
    rx.clock <= clock
    rx.reset <= reset
    node _T_27 = eq(tx.io.bitTx, UInt<1>("h00")) @[TopSimulator.scala 40:41]
    node _T_28 = mux(io.error, _T_27, tx.io.bitTx) @[TopSimulator.scala 40:30]
    reg dataInAir : UInt<1>, clock @[TopSimulator.scala 40:26]
    dataInAir <= _T_28 @[TopSimulator.scala 40:26]
    reg dataInAirB : UInt<1>, clock @[TopSimulator.scala 41:27]
    dataInAirB <= rx.io.bitTx @[TopSimulator.scala 41:27]
    tx.io.frameBits <= io.frameBits @[TopSimulator.scala 44:19]
    tx.io.divisor <= io.divisor @[TopSimulator.scala 45:17]
    tx.io.frameIndex <= io.frameIndex @[TopSimulator.scala 46:20]
    tx.io.in.bits <= io.txin.bits @[TopSimulator.scala 47:12]
    tx.io.in.valid <= io.txin.valid @[TopSimulator.scala 47:12]
    io.txin.ready <= tx.io.in.ready @[TopSimulator.scala 47:12]
    io.txout.bits <= tx.io.out.bits @[TopSimulator.scala 48:13]
    io.txout.valid <= tx.io.out.valid @[TopSimulator.scala 48:13]
    tx.io.out.ready <= io.txout.ready @[TopSimulator.scala 48:13]
    tx.io.bitRx <= dataInAirB @[TopSimulator.scala 49:15]
    rx.io.frameBits <= io.frameBits @[TopSimulator.scala 53:19]
    rx.io.divisor <= io.divisor @[TopSimulator.scala 54:16]
    rx.io.frameIndex <= io.frameIndex @[TopSimulator.scala 55:20]
    rx.io.in.bits <= io.rxin.bits @[TopSimulator.scala 56:12]
    rx.io.in.valid <= io.rxin.valid @[TopSimulator.scala 56:12]
    io.rxin.ready <= rx.io.in.ready @[TopSimulator.scala 56:12]
    io.rxout.bits <= rx.io.out.bits @[TopSimulator.scala 57:13]
    io.rxout.valid <= rx.io.out.valid @[TopSimulator.scala 57:13]
    rx.io.out.ready <= io.rxout.ready @[TopSimulator.scala 57:13]
    rx.io.bitRx <= dataInAir @[TopSimulator.scala 58:15]
    
